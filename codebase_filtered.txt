=== Directory Structure ===
└── expensesplit
    ├── .mvn
    │   └── wrapper
    │       └── maven-wrapper.properties
    ├── .vscode
    │   ├── launch.json
    │   └── settings.json
    ├── HELP.md
    ├── codebase_filtered.py
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── src
    │   ├── main
    │   │   ├── java
    │   │   │   └── com
    │   │   │       └── example
    │   │   │           └── expensesplit
    │   │   │               ├── ExpensesplitApplication.java
    │   │   │               ├── config
    │   │   │               │   ├── CustomUserDetailsService.java
    │   │   │               │   └── SecurityConfig.java
    │   │   │               ├── controller
    │   │   │               │   ├── AuthController.java
    │   │   │               │   ├── BalanceController.java
    │   │   │               │   ├── ExpenseController.java
    │   │   │               │   ├── GroupController.java
    │   │   │               │   ├── UserController.java
    │   │   │               │   └── WebController.java
    │   │   │               ├── dto
    │   │   │               │   ├── BalanceDTO.java
    │   │   │               │   ├── ExpenseDTO.java
    │   │   │               │   ├── ExpenseParticipantDTO.java
    │   │   │               │   ├── GroupDTO.java
    │   │   │               │   └── UserDTO.java
    │   │   │               ├── entity
    │   │   │               │   ├── Expense.java
    │   │   │               │   ├── ExpenseParticipant.java
    │   │   │               │   ├── Group.java
    │   │   │               │   ├── GroupMember.java
    │   │   │               │   └── User.java
    │   │   │               ├── repository
    │   │   │               │   ├── ExpenseParticipantRepository.java
    │   │   │               │   ├── ExpenseRepository.java
    │   │   │               │   ├── GroupMemberRepository.java
    │   │   │               │   ├── GroupRepository.java
    │   │   │               │   └── UserRepository.java
    │   │   │               └── service
    │   │   │                   ├── BalanceService.java
    │   │   │                   ├── ExpenseService.java
    │   │   │                   ├── GroupService.java
    │   │   │                   └── UserService.java
    │   │   └── resources
    │   │       ├── application.properties
    │   │       ├── static
    │   │       │   └── css
    │   │       │       └── styles.css
    │   │       └── templates
    │   │           ├── balances.html
    │   │           ├── expenses.html
    │   │           ├── groups.html
    │   │           ├── index.html
    │   │           ├── login.html
    │   │           ├── register.html
    │   │           └── users.html
    │   └── test
    │       └── java
    │           └── com
    │               └── example
    │                   └── expensesplit
    │                       └── ExpensesplitApplicationTests.java

=== File Contents ===

--- File: mvnw.cmd ---

<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.4
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" ("%__MVNW_CMD__%" %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND -eq $False) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace "^.*$MVNW_REPO_PATTERN",'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''

$MAVEN_M2_PATH = "$HOME/.m2"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_M2_PATH = "$env:MAVEN_USER_HOME"
}

if (-not (Test-Path -Path $MAVEN_M2_PATH)) {
    New-Item -Path $MAVEN_M2_PATH -ItemType Directory | Out-Null
}

$MAVEN_WRAPPER_DISTS = $null
if ((Get-Item $MAVEN_M2_PATH).Target[0] -eq $null) {
  $MAVEN_WRAPPER_DISTS = "$MAVEN_M2_PATH/wrapper/dists"
} else {
  $MAVEN_WRAPPER_DISTS = (Get-Item $MAVEN_M2_PATH).Target[0] + "/wrapper/dists"
}

$MAVEN_HOME_PARENT = "$MAVEN_WRAPPER_DISTS/$distributionUrlNameMain"
$MAVEN_HOME_NAME = ([System.Security.Cryptography.SHA256]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null

# Find the actual extracted directory name (handles snapshots where filename != directory name)
$actualDistributionDir = ""

# First try the expected directory name (for regular distributions)
$expectedPath = Join-Path "$TMP_DOWNLOAD_DIR" "$distributionUrlNameMain"
$expectedMvnPath = Join-Path "$expectedPath" "bin/$MVN_CMD"
if ((Test-Path -Path $expectedPath -PathType Container) -and (Test-Path -Path $expectedMvnPath -PathType Leaf)) {
  $actualDistributionDir = $distributionUrlNameMain
}

# If not found, search for any directory with the Maven executable (for snapshots)
if (!$actualDistributionDir) {
  Get-ChildItem -Path "$TMP_DOWNLOAD_DIR" -Directory | ForEach-Object {
    $testPath = Join-Path $_.FullName "bin/$MVN_CMD"
    if (Test-Path -Path $testPath -PathType Leaf) {
      $actualDistributionDir = $_.Name
    }
  }
}

if (!$actualDistributionDir) {
  Write-Error "Could not find Maven distribution directory in extracted archive"
}

Write-Verbose "Found extracted Maven distribution directory: $actualDistributionDir"
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$actualDistributionDir" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"


--- File: pom.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.7</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>expensesplit</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>expensesplit</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Spring Data JPA -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- Thymeleaf for UI -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- MySQL Database -->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Spring Security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity6</artifactId>
		</dependency>

		<!-- Lombok for reducing boilerplate code -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Validation -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>

--- File: HELP.md ---

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.6/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.6/maven-plugin/build-image.html)
* [Spring Web](https://docs.spring.io/spring-boot/3.5.6/reference/web/servlet.html)

### Guides
The following guides illustrate how to use some features concretely:

* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
* [Building REST services with Spring](https://spring.io/guides/tutorials/rest/)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.



--- File: codebase_filtered.py ---

import os
import sys

def generate_tree(root_dir, output_file, prefix="", is_last=True):
    """Generate a tree-like string representation, skipping dot files, specific directories, and output file."""
    tree = []
    root_name = os.path.basename(root_dir)
    tree.append(f"{prefix}{'└── ' if is_last else '├── '}{root_name}")
    
    prefix += "    " if is_last else "│   "
    skip_dirs = {'.git', 'node_modules', 'venv', '__pycache__', '.venv', 'dist', 'build', '.idea', 'target'}
    
    try:
        output_abs_path = os.path.abspath(output_file)
        items = sorted(os.listdir(root_dir))
        for i, item in enumerate(items):
            item_path = os.path.join(root_dir, item)
            is_last_item = i == len(items) - 1
            if os.path.abspath(item_path) == output_abs_path:
                continue
            if os.path.isdir(item_path):
                if item in skip_dirs:
                    continue
                tree.extend(generate_tree(item_path, output_file, prefix, is_last_item))
            elif not item.startswith('.'):
                tree.append(f"{prefix}{'└── ' if is_last_item else '├── '}{item}")
    except PermissionError:
        tree.append(f"{prefix}{'└── ' if is_last_item else '├── '}[Permission denied]")
    
    return tree

def collect_codebase_filtered(root_dir, output_file):
    skip_dirs = {'.git', 'node_modules', 'venv', '__pycache__', '.venv', 'dist', 'build', '.idea', 'target'}
    output_abs_path = os.path.abspath(output_file)
    
    with open(output_file, 'w', encoding='utf-8') as outfile:
        # Write directory tree
        outfile.write("=== Directory Structure ===\n")
        tree = generate_tree(root_dir, output_file)
        outfile.write("\n".join(tree))
        outfile.write("\n\n=== File Contents ===\n\n")
        
        # Collect file contents
        for dirpath, dirnames, filenames in os.walk(root_dir, topdown=True):
            dirnames[:] = [d for d in dirnames if d not in skip_dirs]
            
            for filename in filenames:
                if filename.startswith('.'):
                    continue
                file_path = os.path.join(dirpath, filename)
                if os.path.abspath(file_path) == output_abs_path:
                    continue
                relative_path = os.path.relpath(file_path, root_dir)
                
                outfile.write(f"--- File: {relative_path} ---\n\n")
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        content = infile.read()
                        outfile.write(content)
                        outfile.write("\n\n")
                except UnicodeDecodeError:
                    outfile.write("[[Binary file or encoding error - content skipped]]\n\n")
                except Exception as e:
                    outfile.write(f"[[Error reading file: {e}]]\n\n")

    print(f"Codebase collected into {output_file}")

if __name__ == "__main__":
    root_dir = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
    output_file = sys.argv[2] if len(sys.argv) > 2 else "codebase_filtered.txt"
    collect_codebase_filtered(root_dir, output_file)

--- File: mvnw ---

#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.4
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

scriptDir="$(dirname "$0")"
scriptName="$(basename "$0")"

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"$scriptDir/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${scriptName#mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c - >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi

# Find the actual extracted directory name (handles snapshots where filename != directory name)
actualDistributionDir=""

# First try the expected directory name (for regular distributions)
if [ -d "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" ]; then
  if [ -f "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/bin/$MVN_CMD" ]; then
    actualDistributionDir="$distributionUrlNameMain"
  fi
fi

# If not found, search for any directory with the Maven executable (for snapshots)
if [ -z "$actualDistributionDir" ]; then
  # enable globbing to iterate over items
  set +f
  for dir in "$TMP_DOWNLOAD_DIR"/*; do
    if [ -d "$dir" ]; then
      if [ -f "$dir/bin/$MVN_CMD" ]; then
        actualDistributionDir="$(basename "$dir")"
        break
      fi
    fi
  done
  set -f
fi

if [ -z "$actualDistributionDir" ]; then
  verbose "Contents of $TMP_DOWNLOAD_DIR:"
  verbose "$(ls -la "$TMP_DOWNLOAD_DIR")"
  die "Could not find Maven distribution directory in extracted archive"
fi

verbose "Found extracted Maven distribution directory: $actualDistributionDir"
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$actualDistributionDir/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$actualDistributionDir" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"


--- File: .mvn/wrapper/maven-wrapper.properties ---

wrapperVersion=3.3.4
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip


--- File: .vscode/settings.json ---

{
    "java.configuration.updateBuildConfiguration": "automatic",
    "java.compile.nullAnalysis.mode": "automatic"
}

--- File: .vscode/launch.json ---

{
    "configurations": [
        {
            "type": "java",
            "name": "Spring Boot-ExpensesplitApplication<expensesplit>",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            "mainClass": "com.example.expensesplit.ExpensesplitApplication",
            "projectName": "expensesplit",
            "args": "",
            "envFile": "${workspaceFolder}/.env"
        }
    ]
}

--- File: src/test/java/com/example/expensesplit/ExpensesplitApplicationTests.java ---

package com.example.expensesplit;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ExpensesplitApplicationTests {

	@Test
	void contextLoads() {
	}

}


--- File: src/main/resources/application.properties ---

# Server Configuration
server.port=8080

# MySQL Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/expense_split_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=Sahil@123

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.defer-datasource-initialization=true

# Thymeleaf Configuration
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.cache=false

# Static Resources Configuration
spring.web.resources.static-locations=classpath:/static/,classpath:/templates/
spring.mvc.static-path-pattern=/**
spring.web.resources.cache.period=0

# Logging for debugging
logging.level.com.example.expensesplit=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

--- File: src/main/resources/static/css/styles.css ---

/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --primary: #2563eb;
    --primary-dark: #1d4ed8;
    --primary-light: #3b82f6;
    --secondary: #7c3aed;
    --secondary-dark: #6d28d9;
    --secondary-light: #8b5cf6;
    --success: #10b981;
    --danger: #ef4444;
    --warning: #f59e0b;
    --info: #06b6d4;
    --dark: #1f2937;
    --light: #f8fafc;
    
    --text-primary: #1f2937;
    --text-secondary: #6b7280;
    --text-light: #9ca3af;
    --bg-primary: #ffffff;
    --bg-secondary: #f8fafc;
    --bg-gradient: linear-gradient(135deg, #2563eb 0%, #7c3aed 100%);
    --bg-gradient-secondary: linear-gradient(135deg, #7c3aed 0%, #2563eb 100%);
    --border-light: #e5e7eb;
    --border: #d1d5db;
    
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-md: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    
    --radius-sm: 6px;
    --radius: 8px;
    --radius-lg: 12px;
    --radius-xl: 16px;
    
    --transition: all 0.2s ease-in-out;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: var(--text-primary);
    background-color: #f9fafb;
    min-height: 100vh;
    -webkit-font-smoothing: antialiased;
}

/* Container */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
}

/* Professional Auth Styles */
.professional-auth-body {
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.professional-auth-container {
    display: flex;
    width: 100%;
    max-width: 1200px;
    height: 90vh;
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    margin: 20px;
}

/* Branding Section */
.auth-branding-section {
    flex: 1;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 60px 40px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.branding-content {
    max-width: 400px;
    text-align: center;
}

.logo-large {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: 40px;
}

.branding-title {
    font-size: 3rem;
    font-weight: 800;
    line-height: 1.1;
    margin-bottom: 20px;
    text-align: left;
}

.branding-subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
    line-height: 1.6;
    margin-bottom: 40px;
    text-align: left;
}

.feature-list {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-bottom: 40px;
}

.feature-item {
    display: flex;
    align-items: center;
    gap: 15px;
    font-size: 1.1rem;
    font-weight: 600;
}

.new-user-section {
    margin-top: 30px;
}

/* Form Section */
.auth-form-section {
    flex: 1;
    padding: 60px 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: white;
}

.form-container {
    width: 100%;
    max-width: 400px;
}

.form-header {
    text-align: center;
    margin-bottom: 40px;
}

.form-header h2 {
    font-size: 2.2rem;
    font-weight: 700;
    color: #2d3748;
    margin-bottom: 8px;
}

.form-header p {
    color: #718096;
    font-size: 1.1rem;
}

/* Professional Form Styles */
.professional-auth-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.input-row {
    display: flex;
    gap: 15px;
}

.input-row .input-group {
    flex: 1;
}

.input-group {
    position: relative;
}

.input-label {
    display: flex;
    align-items: center;
    gap: 8px;
    font-weight: 600;
    color: #4a5568;
    margin-bottom: 8px;
    font-size: 0.9rem;
}

.professional-input {
    width: 100%;
    padding: 16px 20px;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: #f8fafc;
    font-family: inherit;
}

.professional-input:focus {
    outline: none;
    border-color: #667eea;
    background: white;
    box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
}

/* Professional Button */
.professional-btn {
    padding: 16px 24px;
    border: none;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: inherit;
}

.professional-btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.professional-btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
}

.professional-btn-outline {
    background: transparent;
    border: 2px solid rgba(255, 255, 255, 0.3);
    color: white;
}

.professional-btn-outline:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.5);
}

.btn-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

/* Form Options */
.form-options {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 10px 0;
}

.checkbox-container {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    font-size: 0.9rem;
    color: #4a5568;
}

.checkbox-container input {
    display: none;
}

.checkmark {
    width: 18px;
    height: 18px;
    border: 2px solid #cbd5e0;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.checkbox-container input:checked + .checkmark {
    background: #667eea;
    border-color: #667eea;
}

.checkbox-container input:checked + .checkmark::after {
    content: '✓';
    color: white;
    font-size: 12px;
    font-weight: bold;
}

.forgot-password {
    color: #667eea;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 600;
}

.forgot-password:hover {
    text-decoration: underline;
}

/* Alerts */
.professional-alert {
    padding: 16px 20px;
    border-radius: 12px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 12px;
    font-weight: 500;
}

.professional-alert-error {
    background: #fed7d7;
    color: #c53030;
    border: 1px solid #feb2b2;
}

.professional-alert-success {
    background: #c6f6d5;
    color: #276749;
    border: 1px solid #9ae6b4;
}

/* Auth Footer */
.auth-footer {
    text-align: center;
    padding-top: 20px;
    border-top: 1px solid #e2e8f0;
}

.auth-footer p {
    color: #718096;
    margin: 0;
}

.auth-link {
    color: #667eea;
    text-decoration: none;
    font-weight: 600;
}

.auth-link:hover {
    text-decoration: underline;
}

/* Password Validation */
.password-match {
    border-color: #27ae60 !important;
    background-color: rgba(39, 174, 96, 0.05) !important;
}

.password-mismatch {
    border-color: #e74c3c !important;
    background-color: rgba(231, 76, 60, 0.05) !important;
}

.password-feedback {
    font-size: 0.8rem;
    margin-top: 5px;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: 600;
}

.password-feedback.match {
    color: #27ae60;
    background-color: rgba(39, 174, 96, 0.1);
}

.password-feedback.mismatch {
    color: #e74c3c;
    background-color: rgba(231, 76, 60, 0.1);
}

.password-strength {
    font-size: 0.8rem;
    margin-top: 5px;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: 600;
    text-align: center;
}

.password-strength.very-weak {
    color: #e74c3c;
    background-color: rgba(231, 76, 60, 0.1);
}

.password-strength.weak {
    color: #e67e22;
    background-color: rgba(230, 126, 34, 0.1);
}

.password-strength.medium {
    color: #f1c40f;
    background-color: rgba(241, 196, 15, 0.1);
}

.password-strength.strong {
    color: #2ecc71;
    background-color: rgba(46, 204, 113, 0.1);
}

.password-strength.very-strong {
    color: #27ae60;
    background-color: rgba(39, 174, 96, 0.1);
}

/* Loading animation */
.fa-spinner {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Header */
.header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-bottom: 1px solid rgba(229, 231, 235, 0.8);
    padding: 1rem 0;
    position: sticky;
    top: 0;
    z-index: 1000;
    box-shadow: var(--shadow-sm);
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.5rem;
    font-weight: 800;
    color: var(--primary);
    text-decoration: none;
    transition: var(--transition);
}

.logo:hover {
    color: var(--secondary);
}

.nav-links {
    display: flex;
    list-style: none;
    gap: 0.5rem;
    align-items: center;
    background: rgba(37, 99, 235, 0.05);
    padding: 0.5rem;
    border-radius: var(--radius-lg);
}

.nav-links a {
    text-decoration: none;
    color: var(--text-secondary);
    padding: 0.75rem 1.25rem;
    border-radius: var(--radius);
    font-weight: 600;
    transition: var(--transition);
    font-size: 0.9rem;
}

.nav-links a:hover {
    color: var(--primary);
    background: rgba(37, 99, 235, 0.1);
}

.nav-links a.active {
    color: white;
    background: var(--bg-gradient);
    box-shadow: var(--shadow);
}

/* Logout button in nav */
.nav-links form {
    display: inline;
    margin: 0;
}

.nav-links .btn-outline {
    color: var(--text-secondary);
    border: none;
    background: none;
    padding: 0.75rem 1.25rem;
}

.nav-links .btn-outline:hover {
    color: var(--primary);
    background: rgba(37, 99, 235, 0.1);
}

/* Main Content */
.main-content {
    padding: 2rem 0;
    min-height: calc(100vh - 120px);
}

.section-title {
    font-size: 2.5rem;
    font-weight: 800;
    text-align: center;
    margin-bottom: 3rem;
    background: var(--bg-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    position: relative;
}

.section-title::after {
    content: '';
    position: absolute;
    bottom: -0.75rem;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 4px;
    background: var(--bg-gradient);
    border-radius: 2px;
    opacity: 0.8;
}

/* Card Design */
.card {
    background: var(--bg-primary);
    border-radius: var(--radius-xl);
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: var(--shadow);
    border: 1px solid var(--border-light);
    transition: var(--transition);
    position: relative;
    overflow: hidden;
}

.card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--bg-gradient);
    transform: scaleX(0);
    transition: transform 0.3s ease;
}

.card:hover::before {
    transform: scaleX(1);
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.card-title {
    font-size: 1.375rem;
    font-weight: 700;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.card-title::before {
    content: '';
    width: 4px;
    height: 20px;
    background: var(--bg-gradient);
    border-radius: 2px;
}

/* Form Styles */
.form-group {
    margin-bottom: 1.5rem;
}

.form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: var(--text-primary);
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.form-control {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid var(--border-light);
    border-radius: var(--radius-lg);
    font-size: 1rem;
    transition: var(--transition);
    background: var(--bg-primary);
    font-family: inherit;
}

.form-control:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

/* Button Styles */
.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.875rem 1.5rem;
    border: none;
    border-radius: var(--radius-lg);
    font-size: 0.9rem;
    font-weight: 600;
    text-decoration: none;
    cursor: pointer;
    transition: var(--transition);
    position: relative;
    overflow: hidden;
}

.btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    transition: var(--transition);
    transform: translate(-50%, -50%);
}

.btn:hover::before {
    width: 200px;
    height: 200px;
}

.btn:hover {
    transform: translateY(-1px);
}

.btn:active {
    transform: translateY(0);
}

.btn-primary {
    background: var(--primary);
    color: white;
}

.btn-primary:hover {
    background: var(--primary-dark);
}

.btn-secondary {
    background: var(--secondary);
    color: white;
}

.btn-secondary:hover {
    background: var(--secondary-dark);
}

.btn-success {
    background: var(--success);
    color: white;
}

.btn-danger {
    background: var(--danger);
    color: white;
}

.btn-outline {
    background: transparent;
    border: 2px solid var(--border);
    color: var(--text-secondary);
}

.btn-outline:hover {
    border-color: var(--primary);
    color: var(--primary);
}

.btn-sm {
    padding: 0.625rem 1.25rem;
    font-size: 0.85rem;
}

/* Table Styles */
.table-container {
    background: var(--bg-primary);
    border-radius: var(--radius-xl);
    overflow: hidden;
    box-shadow: var(--shadow);
    border: 1px solid var(--border-light);
}

.table {
    width: 100%;
    border-collapse: collapse;
    background: var(--bg-primary);
}

.table thead {
    background: var(--bg-gradient);
}

.table th {
    padding: 1rem 1.5rem;
    text-align: left;
    font-weight: 700;
    color: white;
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.table td {
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--border-light);
    transition: var(--transition);
}

.table tbody tr {
    transition: var(--transition);
}

.table tbody tr:hover {
    background: rgba(37, 99, 235, 0.04);
}

.table tbody tr:last-child td {
    border-bottom: none;
}

/* Alert Styles */
.alert {
    padding: 1rem 1.5rem;
    border-radius: var(--radius-lg);
    margin-bottom: 1.5rem;
    border: 2px solid;
    background: var(--bg-primary);
    box-shadow: var(--shadow);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    animation: slideIn 0.3s ease-out;
}

.alert-success {
    border-color: var(--success);
    background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(16, 185, 129, 0.05) 100%);
}

.alert-error {
    border-color: var(--danger);
    background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(239, 68, 68, 0.05) 100%);
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Grid System */
.row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -1rem;
    gap: 1.5rem;
}

.col {
    flex: 1;
    min-width: 0;
}

.col-6 {
    flex: 0 0 calc(50% - 1.5rem);
    min-width: 0;
}

.col-4 {
    flex: 0 0 calc(33.333% - 1.5rem);
    min-width: 0;
}

.col-3 {
    flex: 0 0 calc(25% - 1.5rem);
    min-width: 0;
}

/* Stats Cards */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.stat-card {
    background: var(--bg-primary);
    padding: 2rem;
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow);
    text-align: center;
    transition: var(--transition);
    border: 1px solid var(--border-light);
    position: relative;
    overflow: hidden;
}

.stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--bg-gradient);
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.stat-number {
    font-size: 2.5rem;
    font-weight: 800;
    color: var(--primary);
    margin-bottom: 0.5rem;
}

.stat-label {
    color: var(--text-secondary);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.8rem;
}

/* Balance Cards */
.balance-card {
    background: var(--bg-primary);
    padding: 2rem;
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow);
    text-align: center;
    transition: var(--transition);
    border-top: 4px solid;
    position: relative;
    overflow: hidden;
}

.balance-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.balance-positive {
    border-top-color: var(--success);
    background: linear-gradient(135deg, #ffffff 0%, rgba(16, 185, 129, 0.05) 100%);
}

.balance-negative {
    border-top-color: var(--danger);
    background: linear-gradient(135deg, #ffffff 0%, rgba(239, 68, 68, 0.05) 100%);
}

.balance-zero {
    border-top-color: var(--dark);
    background: linear-gradient(135deg, #ffffff 0%, rgba(31, 41, 55, 0.05) 100%);
}

.balance-amount {
    font-size: 2rem;
    font-weight: 800;
    margin: 1rem 0;
}

.balance-positive .balance-amount {
    color: var(--success);
}

.balance-negative .balance-amount {
    color: var(--danger);
}

.balance-zero .balance-amount {
    color: var(--dark);
}

/* Quick Actions */
.quick-actions {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.action-btn {
    background: var(--bg-primary);
    padding: 1.5rem;
    border-radius: var(--radius-xl);
    text-decoration: none;
    color: var(--text-primary);
    text-align: center;
    transition: var(--transition);
    border: 2px solid var(--border-light);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    box-shadow: var(--shadow);
}

.action-btn:hover {
    border-color: var(--primary);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.action-icon {
    width: 48px;
    height: 48px;
    background: var(--bg-gradient);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.25rem;
    box-shadow: var(--shadow);
}

/* Footer */
.footer {
    background: var(--dark);
    color: white;
    text-align: center;
    padding: 2rem 0;
    margin-top: 3rem;
    background: var(--bg-gradient-secondary);
}

/* Settlement Styles */
.settlement-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.settlement-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem;
    background: var(--bg-secondary);
    border-radius: var(--radius);
    border-left: 4px solid var(--primary);
    font-size: 0.9rem;
}

.debtor {
    font-weight: 700;
    color: var(--danger);
}

.creditor {
    font-weight: 700;
    color: var(--success);
}

.amount {
    font-weight: 700;
    color: var(--primary);
}

.action {
    color: var(--text-secondary);
}

/* Recent Activity */
.recent-expenses {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
}

.recent-item {
    padding: 1rem;
    background: var(--bg-secondary);
    border-radius: var(--radius);
    border-left: 4px solid var(--primary);
    transition: var(--transition);
}

.recent-item:hover {
    transform: translateX(4px);
    box-shadow: var(--shadow-sm);
}

.recent-item strong {
    color: var(--text-primary);
    display: block;
    margin-bottom: 0.25rem;
}

.recent-item small {
    color: var(--text-secondary);
    font-size: 0.8rem;
}

.group-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 0.75rem;
}

.group-item {
    padding: 0.75rem;
    background: linear-gradient(135deg, rgba(37, 99, 235, 0.1) 0%, rgba(124, 58, 237, 0.1) 100%);
    border-radius: var(--radius);
    color: var(--primary);
    font-weight: 600;
    text-align: center;
    border: 1px solid rgba(37, 99, 235, 0.2);
    transition: var(--transition);
}

.group-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
}

/* Utility Classes */
.text-center { text-align: center; }
.text-right { text-align: right; }
.text-left { text-align: left; }
.mt-0 { margin-top: 0; }
.mt-1 { margin-top: 0.5rem; }
.mt-2 { margin-top: 1rem; }
.mt-3 { margin-top: 1.5rem; }
.mt-4 { margin-top: 2rem; }
.mt-5 { margin-top: 2.5rem; }
.mb-0 { margin-bottom: 0; }
.mb-1 { margin-bottom: 0.5rem; }
.mb-2 { margin-bottom: 1rem; }
.mb-3 { margin-bottom: 1.5rem; }
.mb-4 { margin-bottom: 2rem; }
.mb-5 { margin-bottom: 2.5rem; }
.p-0 { padding: 0; }
.p-1 { padding: 0.5rem; }
.p-2 { padding: 1rem; }
.p-3 { padding: 1.5rem; }
.p-4 { padding: 2rem; }
.p-5 { padding: 2.5rem; }
.hidden { display: none; }

/* Remove button specific styles */
.btn-remove {
    background: var(--danger);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: var(--radius);
    cursor: pointer;
    font-size: 0.8rem;
    transition: var(--transition);
}

.btn-remove:hover {
    background: #dc2626;
    transform: translateY(-1px);
}

/* Quick Expense Form Styles */
.quick-expense-form .form-group {
    margin-bottom: 1rem;
}

.quick-expense-form .form-label {
    font-size: 0.8rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
    display: block;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.quick-expense-form .form-control {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid var(--border-light);
    border-radius: var(--radius);
    font-size: 0.9rem;
    transition: var(--transition);
    background: var(--bg-primary);
}

.quick-expense-form .form-control:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

/* Responsive Design */
@media (max-width: 968px) {
    .professional-auth-container {
        flex-direction: column;
        height: auto;
        margin: 10px;
    }
    
    .auth-branding-section {
        padding: 40px 20px;
    }
    
    .auth-form-section {
        padding: 40px 20px;
    }
    
    .branding-title {
        font-size: 2.2rem;
        text-align: center;
    }
    
    .branding-subtitle {
        text-align: center;
    }
    
    .input-row {
        flex-direction: column;
        gap: 20px;
    }
}

@media (max-width: 768px) {
    .container {
        padding: 0 1rem;
    }
    
    .navbar {
        flex-direction: column;
        gap: 1rem;
    }
    
    .nav-links {
        width: 100%;
        justify-content: center;
        flex-wrap: wrap;
    }
    
    .section-title {
        font-size: 2rem;
    }
    
    .col-6, .col-4, .col-3 {
        flex: 0 0 100%;
    }
    
    .stats-grid {
        grid-template-columns: 1fr;
    }
    
    .quick-actions {
        grid-template-columns: 1fr;
    }
    
    .card {
        padding: 1.5rem;
    }
    
    .table {
        font-size: 0.8rem;
    }
    
    .table th,
    .table td {
        padding: 0.75rem 1rem;
    }
    
    /* Responsive table actions */
    .table td:last-child {
        text-align: center;
    }
    
    .btn-remove {
        width: 100%;
        margin-top: 0.5rem;
    }
}

@media (max-width: 480px) {
    .main-content {
        padding: 1.5rem 0;
    }
    
    .card {
        padding: 1.25rem;
    }
    
    .btn {
        width: 100%;
        justify-content: center;
    }
    
    .table-container {
        overflow-x: auto;
    }
    
    .section-title {
        font-size: 1.75rem;
    }
    
    .professional-auth-container {
        margin: 5px;
        border-radius: 15px;
    }
    
    .auth-branding-section,
    .auth-form-section {
        padding: 30px 15px;
    }
    
    .branding-title {
        font-size: 1.8rem;
    }
    
    .logo-large {
        font-size: 2rem;
    }
    
    .form-header h2 {
        font-size: 1.8rem;
    }
    
    .group-list {
        grid-template-columns: 1fr;
    }
    
    .quick-expense-form .form-control {
        font-size: 1rem;
    }
}

/* Responsive Design for Quick Forms */
@media (max-width: 1024px) {
    .row {
        gap: 1rem;
    }
    
    .col-4 {
        flex: 0 0 calc(50% - 1rem);
    }
}

@media (max-width: 768px) {
    .row {
        flex-direction: column;
    }
    
    .col-4 {
        flex: 0 0 100%;
    }
}

--- File: src/main/resources/templates/expenses.html ---

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expenses - Expense Split Tracker</title>
    <link rel="stylesheet" th:href="@{/css/styles.css}">
</head>
<body>
    <header class="header">
        <div class="container">
            <nav class="navbar">
                <div class="logo"> ExpenseSplit</div>
                <ul class="nav-links">
                    <li><a href="/">Dashboard</a></li>
                    <li><a href="/users">Users</a></li>
                    <li><a href="/groups">Groups</a></li>
                    <li><a href="/expenses" class="active">Expenses</a></li>
                    <li><a href="/balances">Balances</a></li>
                    <li>
                        <form th:action="@{/logout}" method="post" style="display: inline;">
                            <button type="submit" class="btn btn-outline btn-sm" style="color: var(--text-secondary); border: none; background: none;">
                                Logout
                            </button>
                        </form>
                    </li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
            <h1 class="section-title">Manage Expenses</h1>

            <!-- Alert Container -->
            <div id="alertContainer"></div>

            <!-- Create Expense Form -->
            <div class="card">
                <h2 class="card-title">Add New Expense</h2>
                <form id="expenseForm">
                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label class="form-label" for="groupId">Group</label>
                                <select class="form-control" id="groupId" name="groupId" required>
                                    <option value="">Select Group</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label class="form-label" for="paidBy">Paid By</label>
                                <select class="form-control" id="paidBy" name="paidBy" required>
                                    <option value="">Select User</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label class="form-label" for="amount">Amount (₹)</label>
                                <input type="number" class="form-control" id="amount" name="amount" step="0.01" min="0.01" placeholder="Enter amount in rupees" required>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label class="form-label" for="description">Description</label>
                                <input type="text" class="form-control" id="description" name="description" placeholder="Enter expense description" required>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Expense</button>
                </form>
            </div>

            <!-- Expenses List -->
            <div class="card">
                <h2 class="card-title">All Expenses</h2>
                <div class="form-group">
                    <label class="form-label" for="filterGroupId">Filter by Group</label>
                    <select class="form-control" id="filterGroupId" name="filterGroupId">
                        <option value="">All Groups</option>
                    </select>
                </div>
                <div class="table-container">
                    <table class="table" id="expensesTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Paid By</th>
                                <th>Group</th>
                                <th>Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="expensesTableBody">
                            <!-- Expenses will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 ExpenseSplit Tracker. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Store user and group data for display
        let usersMap = {};
        let groupsMap = {};

        document.addEventListener('DOMContentLoaded', function() {
            loadGroups();
            loadUsers();
            loadExpenses();
            
            document.getElementById('expenseForm').addEventListener('submit', function(e) {
                e.preventDefault();
                createExpense();
            });
            
            document.getElementById('filterGroupId').addEventListener('change', function() {
                loadExpenses(this.value);
            });
        });

        function showAlert(message, type = 'error') {
            const alertContainer = document.getElementById('alertContainer');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            alertContainer.appendChild(alertDiv);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        function loadGroups() {
            fetch('/api/groups')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load groups');
                    }
                    return response.json();
                })
                .then(groups => {
                    const groupSelect = document.getElementById('groupId');
                    const filterGroupSelect = document.getElementById('filterGroupId');
                    
                    groupSelect.innerHTML = '<option value="">Select Group</option>';
                    filterGroupSelect.innerHTML = '<option value="">All Groups</option>';
                    
                    groups.forEach(group => {
                        groupsMap[group.groupId] = group.name;
                        
                        const option = document.createElement('option');
                        option.value = group.groupId;
                        option.textContent = group.name;
                        groupSelect.appendChild(option.cloneNode(true));
                        filterGroupSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading groups:', error);
                    showAlert('Error loading groups. Please try again.');
                });
        }

        function loadUsers() {
            fetch('/api/users')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load users');
                    }
                    return response.json();
                })
                .then(users => {
                    const userSelect = document.getElementById('paidBy');
                    userSelect.innerHTML = '<option value="">Select User</option>';
                    
                    users.forEach(user => {
                        usersMap[user.userId] = user.name;
                        
                        const option = document.createElement('option');
                        option.value = user.userId;
                        option.textContent = `${user.name} (${user.email})`;
                        userSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                    showAlert('Error loading users. Please try again.');
                });
        }

        function loadExpenses(groupId = '') {
            let url = '/api/expenses';
            if (groupId) {
                url = `/api/expenses/group/${groupId}`;
            }
            
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load expenses');
                    }
                    return response.json();
                })
                .then(expenses => {
                    const tbody = document.getElementById('expensesTableBody');
                    tbody.innerHTML = '';
                    
                    if (expenses.length === 0) {
                        const row = document.createElement('tr');
                        row.innerHTML = `<td colspan="7" class="text-center">No expenses found. Add some expenses to get started.</td>`;
                        tbody.appendChild(row);
                        return;
                    }
                    
                    expenses.forEach(expense => {
                        const paidByName = usersMap[expense.paidBy] || `User ${expense.paidBy}`;
                        const groupName = groupsMap[expense.groupId] || `Group ${expense.groupId}`;
                        const expenseDate = expense.expenseDate ? new Date(expense.expenseDate).toLocaleDateString() : 'N/A';
                        
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${expense.expenseId}</td>
                            <td>${expense.description}</td>
                            <td>₹${expense.amount.toFixed(2)}</td>
                            <td>${paidByName}</td>
                            <td>${groupName}</td>
                            <td>${expenseDate}</td>
                            <td>
                                <button class="btn btn-danger btn-sm" onclick="deleteExpense(${expense.expenseId})">Delete</button>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                })
                .catch(error => {
                    console.error('Error loading expenses:', error);
                    showAlert('Error loading expenses. Please try again.');
                });
        }

        function createExpense() {
            const form = document.getElementById('expenseForm');
            const formData = new FormData(form);
            
            // Validate required fields
            const groupId = formData.get('groupId');
            const paidBy = formData.get('paidBy');
            const amount = formData.get('amount');
            const description = formData.get('description');
            
            if (!groupId || !paidBy || !amount || !description) {
                showAlert('Please fill all required fields.');
                return;
            }

            if (parseFloat(amount) <= 0) {
                showAlert('Amount must be greater than 0.');
                return;
            }

            const expenseData = {
                groupId: parseInt(groupId),
                paidBy: parseInt(paidBy),
                amount: parseFloat(amount),
                description: description
            };

            console.log('Sending expense data:', expenseData);

            fetch('/api/expenses', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(expenseData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { 
                        throw new Error(text || 'Failed to create expense');
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Expense created successfully:', data);
                form.reset();
                loadExpenses();
                showAlert('Expense created successfully!', 'success');
            })
            .catch(error => {
                console.error('Error creating expense:', error);
                let errorMessage = 'Error creating expense. Please try again.';
                
                // Parse error message for better user feedback
                if (error.message.includes('Group not found')) {
                    errorMessage = 'Selected group not found.';
                } else if (error.message.includes('User not found')) {
                    errorMessage = 'Selected payer not found.';
                } else if (error.message.includes('not a member')) {
                    errorMessage = 'Selected payer is not a member of this group.';
                } else if (error.message.includes('Failed to create expense')) {
                    errorMessage = 'Failed to create expense. Please check if the user is a member of the group.';
                }
                
                showAlert(errorMessage);
            });
        }

        function deleteExpense(expenseId) {
            if (confirm('Are you sure you want to delete this expense? This action cannot be undone.')) {
                fetch(`/api/expenses/${expenseId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        loadExpenses();
                        showAlert('Expense deleted successfully!', 'success');
                    } else {
                        return response.text().then(text => { 
                            throw new Error(text || 'Failed to delete expense');
                        });
                    }
                })
                .catch(error => {
                    console.error('Error deleting expense:', error);
                    showAlert('Error deleting expense: ' + error.message);
                });
            }
        }
    </script>
</body>
</html>

--- File: src/main/resources/templates/index.html ---

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expense Split Tracker</title>
    <link rel="stylesheet" th:href="@{/css/styles.css}">
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <nav class="navbar">
                <div class="logo"> ExpenseSplit</div>
                <ul class="nav-links">
                    <li><a href="/" class="active">Dashboard</a></li>
                    <li><a href="/users">Users</a></li>
                    <li><a href="/groups">Groups</a></li>
                    <li><a href="/expenses">Expenses</a></li>
                    <li><a href="/balances">Balances</a></li>
                    <li>
                        <form th:action="@{/logout}" method="post" style="display: inline;">
                            <button type="submit" class="btn btn-outline btn-sm" style="color: var(--text-secondary); border: none; background: none;">
                                Logout
                            </button>
                        </form>
                    </li>
                </ul>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <div class="container">
            <h1 class="section-title">Expense Split Dashboard</h1>
            
            <!-- Alert Container -->
            <div id="alertContainer"></div>
            
            <!-- Quick Stats -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" th:text="${totalUsers ?: '0'}">0</div>
                    <div class="stat-label">Total Users</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" th:text="${totalGroups ?: '0'}">0</div>
                    <div class="stat-label">Total Groups</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" th:text="${totalExpenses ?: '0'}">0</div>
                    <div class="stat-label">Total Expenses</div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="card">
                <h2 class="card-title">Quick Actions</h2>
                <div class="quick-actions">
                    <a href="/users" class="action-btn">
                        <div class="action-icon">👥</div>
                        <span>Manage Users</span>
                    </a>
                    <a href="/groups" class="action-btn">
                        <div class="action-icon">🏠</div>
                        <span>Manage Groups</span>
                    </a>
                    <a href="/expenses" class="action-btn">
                        <div class="action-icon">💰</div>
                        <span>Manage Expenses</span>
                    </a>
                    <a href="/balances" class="action-btn">
                        <div class="action-icon">⚖️</div>
                        <span>View Balances</span>
                    </a>
                </div>
            </div>

            <!-- Quick Create Forms -->
            <div class="row">
                <!-- Quick Add User -->
                <div class="col-4">
                    <div class="card">
                        <h3 class="card-title">Quick Add User</h3>
                        <form id="quickUserForm">
                            <div class="form-group">
                                <input type="text" class="form-control" id="quickUserName" placeholder="Full Name" required>
                            </div>
                            <div class="form-group">
                                <input type="email" class="form-control" id="quickUserEmail" placeholder="Email Address" required>
                            </div>
                            <div class="form-group">
                                <input type="tel" class="form-control" id="quickUserContact" placeholder="Contact Number">
                            </div>
                            <button type="submit" class="btn btn-primary btn-sm">Add User</button>
                        </form>
                    </div>
                </div>

                <!-- Quick Create Group -->
                <div class="col-4">
                    <div class="card">
                        <h3 class="card-title">Quick Create Group</h3>
                        <form id="quickGroupForm">
                            <div class="form-group">
                                <input type="text" class="form-control" id="quickGroupName" placeholder="Group Name" required>
                            </div>
                            <button type="submit" class="btn btn-primary btn-sm">Create Group</button>
                        </form>
                    </div>
                </div>

                <!-- Quick Add Expense -->
                <div class="col-4">
                    <div class="card">
                        <h3 class="card-title">Quick Add Expense</h3>
                        <form id="quickExpenseForm">
                            <div class="form-group">
                                <label class="form-label">Group</label>
                                <select class="form-control" id="quickExpenseGroup" required>
                                    <option value="">Select Group</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Paid By</label>
                                <select class="form-control" id="quickExpensePaidBy" required>
                                    <option value="">Select User</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Description</label>
                                <input type="text" class="form-control" id="quickExpenseDesc" placeholder="Expense description" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Amount (₹)</label>
                                <input type="number" class="form-control" id="quickExpenseAmount" placeholder="Amount in rupees" step="0.01" min="0.01" required>
                            </div>
                            <button type="submit" class="btn btn-success btn-sm">Add Expense</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="card">
                <h2 class="card-title">Recent Activity</h2>
                <div id="recentActivity">
                    <p>Loading recent activity...</p>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 ExpenseSplit Tracker. All rights reserved.</p>
        </div>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadRecentActivity();
            loadGroupsForQuickExpense();
            loadUsersForQuickExpense();
            
            // Quick Add User Form
            document.getElementById('quickUserForm').addEventListener('submit', function(e) {
                e.preventDefault();
                quickAddUser();
            });
            
            // Quick Create Group Form
            document.getElementById('quickGroupForm').addEventListener('submit', function(e) {
                e.preventDefault();
                quickCreateGroup();
            });
            
            // Quick Add Expense Form
            document.getElementById('quickExpenseForm').addEventListener('submit', function(e) {
                e.preventDefault();
                quickAddExpense();
            });
        });

        function showAlert(message, type = 'error') {
            const alertContainer = document.getElementById('alertContainer');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            alertContainer.appendChild(alertDiv);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        function loadGroupsForQuickExpense() {
            fetch('/api/groups')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load groups');
                    }
                    return response.json();
                })
                .then(groups => {
                    const groupSelect = document.getElementById('quickExpenseGroup');
                    groupSelect.innerHTML = '<option value="">Select Group</option>';
                    
                    groups.forEach(group => {
                        const option = document.createElement('option');
                        option.value = group.groupId;
                        option.textContent = group.name;
                        groupSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading groups for quick expense:', error);
                    showAlert('Error loading groups. Please try again.');
                });
        }

        function loadUsersForQuickExpense() {
            fetch('/api/users')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load users');
                    }
                    return response.json();
                })
                .then(users => {
                    const userSelect = document.getElementById('quickExpensePaidBy');
                    userSelect.innerHTML = '<option value="">Select User</option>';
                    
                    users.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.userId;
                        option.textContent = `${user.name} (${user.email})`;
                        userSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading users for quick expense:', error);
                    showAlert('Error loading users. Please try again.');
                });
        }

        function quickAddUser() {
            const name = document.getElementById('quickUserName').value;
            const email = document.getElementById('quickUserEmail').value;
            const contactNo = document.getElementById('quickUserContact').value;
            
            if (!name || !email) {
                showAlert('Please fill all required fields.');
                return;
            }

            const userData = {
                name: name,
                email: email,
                contactNo: contactNo,
                password: "default123" // Default password for quick add
            };

            fetch('/api/users', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(userData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.json();
            })
            .then(() => {
                document.getElementById('quickUserForm').reset();
                showAlert('User added successfully!', 'success');
                loadUsersForQuickExpense(); // Refresh user dropdown
                setTimeout(() => location.reload(), 1000); // Reload to update stats
            })
            .catch(error => {
                console.error('Error adding user:', error);
                showAlert('Error adding user: ' + error.message);
            });
        }

        function quickCreateGroup() {
            const name = document.getElementById('quickGroupName').value;
            
            if (!name) {
                showAlert('Please enter a group name.');
                return;
            }

            const groupData = {
                name: name
            };

            fetch('/api/groups', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(groupData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.json();
            })
            .then(() => {
                document.getElementById('quickGroupForm').reset();
                showAlert('Group created successfully!', 'success');
                loadGroupsForQuickExpense(); // Refresh group dropdown
                setTimeout(() => location.reload(), 1000); // Reload to update stats
            })
            .catch(error => {
                console.error('Error creating group:', error);
                showAlert('Error creating group: ' + error.message);
            });
        }

        function quickAddExpense() {
            const groupId = document.getElementById('quickExpenseGroup').value;
            const paidBy = document.getElementById('quickExpensePaidBy').value;
            const description = document.getElementById('quickExpenseDesc').value;
            const amount = document.getElementById('quickExpenseAmount').value;
            
            // Validate all fields
            if (!groupId || !paidBy || !description || !amount) {
                showAlert('Please fill all required fields.');
                return;
            }

            if (parseFloat(amount) <= 0) {
                showAlert('Amount must be greater than 0.');
                return;
            }

            const expenseData = {
                groupId: parseInt(groupId),
                paidBy: parseInt(paidBy),
                amount: parseFloat(amount),
                description: description
            };

            console.log('Sending expense data:', expenseData);

            fetch('/api/expenses', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(expenseData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { 
                        throw new Error(text || 'Failed to create expense');
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Expense created successfully:', data);
                document.getElementById('quickExpenseForm').reset();
                showAlert('Expense added successfully!', 'success');
                loadRecentActivity(); // Refresh recent activity
                setTimeout(() => location.reload(), 1000); // Reload to update stats
            })
            .catch(error => {
                console.error('Error creating expense:', error);
                let errorMessage = 'Error creating expense. Please try again.';
                
                // Parse error message for better user feedback
                if (error.message.includes('Group not found')) {
                    errorMessage = 'Selected group not found.';
                } else if (error.message.includes('User not found')) {
                    errorMessage = 'Selected payer not found.';
                } else if (error.message.includes('not a member')) {
                    errorMessage = 'Selected payer is not a member of this group.';
                } else if (error.message.includes('Failed to create expense')) {
                    errorMessage = 'Failed to create expense. Please check if the user is a member of the group.';
                }
                
                showAlert(errorMessage);
            });
        }

        function loadRecentActivity() {
            Promise.all([
                fetch('/api/groups').then(r => r.json()).catch(() => []),
                fetch('/api/expenses').then(r => r.json()).catch(() => [])
            ])
            .then(([groups, expenses]) => {
                const activityDiv = document.getElementById('recentActivity');
                let html = '';
                
                if (expenses && expenses.length > 0) {
                    html += '<h4>Recent Expenses</h4><div class="recent-expenses">';
                    // Get group names for display
                    const groupMap = {};
                    groups.forEach(group => {
                        groupMap[group.groupId] = group.name;
                    });
                    
                    // Get user names for display
                    const userMap = {};
                    fetch('/api/users')
                        .then(r => r.json())
                        .then(users => {
                            users.forEach(user => {
                                userMap[user.userId] = user.name;
                            });
                            
                            expenses.slice(0, 5).forEach(expense => {
                                const groupName = groupMap[expense.groupId] || 'Unknown Group';
                                const paidByName = userMap[expense.paidBy] || 'Unknown User';
                                html += `
                                    <div class="recent-item">
                                        <strong>${expense.description}</strong> - ₹${expense.amount.toFixed(2)}
                                        <br><small>Paid by: ${paidByName} • Group: ${groupName} • ${expense.expenseDate ? new Date(expense.expenseDate).toLocaleDateString() : 'N/A'}</small>
                                    </div>
                                `;
                            });
                            
                            html += '</div>';
                            
                            if (groups && groups.length > 0) {
                                html += '<h4>Your Groups</h4><div class="group-list">';
                                groups.slice(0, 3).forEach(group => {
                                    html += `<div class="group-item">${group.name}</div>`;
                                });
                                html += '</div>';
                            }
                            
                            activityDiv.innerHTML = html;
                        })
                        .catch(error => {
                            console.error('Error loading users for activity:', error);
                            activityDiv.innerHTML = '<p>Error loading recent activity.</p>';
                        });
                    
                } else {
                    html += '<p>No recent expenses found. Add an expense to get started!</p>';
                    
                    if (groups && groups.length > 0) {
                        html += '<h4>Your Groups</h4><div class="group-list">';
                        groups.slice(0, 3).forEach(group => {
                            html += `<div class="group-item">${group.name}</div>`;
                        });
                        html += '</div>';
                    }
                    
                    activityDiv.innerHTML = html;
                }
            })
            .catch(error => {
                console.error('Error loading activity:', error);
                document.getElementById('recentActivity').innerHTML = '<p>Error loading recent activity.</p>';
            });
        }
    </script>

    <style>
        .recent-expenses {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }
        
        .recent-item {
            padding: 0.75rem;
            background: var(--bg-secondary);
            border-radius: var(--radius);
            border-left: 4px solid var(--primary);
        }
        
        .recent-item strong {
            color: var(--text-primary);
        }
        
        .recent-item small {
            color: var(--text-secondary);
            font-size: 0.8rem;
        }
        
        .group-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .group-item {
            padding: 0.5rem 0.75rem;
            background: rgba(37, 99, 235, 0.1);
            border-radius: var(--radius);
            color: var(--primary);
            font-weight: 500;
        }
        
        @media (max-width: 768px) {
            .row {
                flex-direction: column;
            }
            
            .col-4 {
                flex: 0 0 100%;
                margin-bottom: 1rem;
            }
        }
    </style>
</body>
</html>

--- File: src/main/resources/templates/groups.html ---

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Groups - Expense Split Tracker</title>
    <link rel="stylesheet" th:href="@{/css/styles.css}">
</head>
<body>
    <header class="header">
        <div class="container">
            <nav class="navbar">
                <div class="logo"> ExpenseSplit</div>
                <ul class="nav-links">
                    <li><a href="/">Dashboard</a></li>
                    <li><a href="/users">Users</a></li>
                    <li><a href="/groups" class="active">Groups</a></li>
                    <li><a href="/expenses">Expenses</a></li>
                    <li><a href="/balances">Balances</a></li>
                    <li>
                        <form th:action="@{/logout}" method="post" style="display: inline;">
                            <button type="submit" class="btn btn-outline btn-sm" style="color: var(--text-secondary); border: none; background: none;">
                                Logout
                            </button>
                        </form>
                    </li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
            <h1 class="section-title">Manage Groups</h1>

            <!-- Alert Container -->
            <div id="alertContainer"></div>

            <!-- Create Group Form -->
            <div class="card">
                <h2 class="card-title">Create New Group</h2>
                <form id="groupForm">
                    <div class="form-group">
                        <label class="form-label" for="name">Group Name</label>
                        <input type="text" class="form-control" id="name" name="name" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Create Group</button>
                </form>
            </div>

            <!-- Add Member to Group -->
            <div class="card">
                <h2 class="card-title">Add Member to Group</h2>
                <form id="addMemberForm">
                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label class="form-label" for="groupId">Group</label>
                                <select class="form-control" id="groupId" name="groupId" required>
                                    <option value="">Select Group</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label class="form-label" for="userId">User</label>
                                <select class="form-control" id="userId" name="userId" required>
                                    <option value="">Select User</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-success">Add Member</button>
                </form>
            </div>

            <!-- Groups List -->
            <div class="card">
                <h2 class="card-title">All Groups</h2>
                <div class="table-container">
                    <table class="table" id="groupsTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Created Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="groupsTableBody">
                            <!-- Groups will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Group Members -->
            <div class="card">
                <h2 class="card-title">Group Members</h2>
                <div class="form-group">
                    <label class="form-label" for="viewGroupId">Select Group to View Members</label>
                    <select class="form-control" id="viewGroupId" name="viewGroupId">
                        <option value="">Select Group</option>
                    </select>
                </div>
                <div class="table-container">
                    <table class="table" id="membersTable">
                        <thead>
                            <tr>
                                <th>User ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Contact</th>
                                <th>Joined Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="membersTableBody">
                            <!-- Members will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 ExpenseSplit Tracker. All rights reserved.</p>
        </div>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadGroups();
            loadUsers();
            
            document.getElementById('groupForm').addEventListener('submit', function(e) {
                e.preventDefault();
                createGroup();
            });
            
            document.getElementById('addMemberForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addMemberToGroup();
            });
            
            document.getElementById('viewGroupId').addEventListener('change', function() {
                loadGroupMembers(this.value);
            });
        });

        function showAlert(message, type = 'error') {
            const alertContainer = document.getElementById('alertContainer');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            alertContainer.appendChild(alertDiv);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        function loadGroups() {
            fetch('/api/groups')
                .then(response => response.json())
                .then(groups => {
                    const groupSelect = document.getElementById('groupId');
                    const viewGroupSelect = document.getElementById('viewGroupId');
                    const tbody = document.getElementById('groupsTableBody');
                    
                    // Clear existing options
                    groupSelect.innerHTML = '<option value="">Select Group</option>';
                    viewGroupSelect.innerHTML = '<option value="">Select Group</option>';
                    tbody.innerHTML = '';
                    
                    if (groups.length === 0) {
                        const row = document.createElement('tr');
                        row.innerHTML = `<td colspan="4" class="text-center">No groups found. Create a group to get started.</td>`;
                        tbody.appendChild(row);
                        return;
                    }
                    
                    groups.forEach(group => {
                        // Add to select dropdowns
                        const option = document.createElement('option');
                        option.value = group.groupId;
                        option.textContent = group.name;
                        groupSelect.appendChild(option.cloneNode(true));
                        viewGroupSelect.appendChild(option);
                        
                        // Add to table
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${group.groupId}</td>
                            <td>${group.name}</td>
                            <td>${new Date(group.createdAt).toLocaleDateString()}</td>
                            <td>
                                <button class="btn btn-danger btn-sm" onclick="deleteGroup(${group.groupId})">Delete Group</button>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                })
                .catch(error => {
                    console.error('Error loading groups:', error);
                    showAlert('Error loading groups. Please try again.');
                });
        }

        function loadUsers() {
            fetch('/api/users')
                .then(response => response.json())
                .then(users => {
                    const userSelect = document.getElementById('userId');
                    userSelect.innerHTML = '<option value="">Select User</option>';
                    
                    users.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.userId;
                        option.textContent = `${user.name} (${user.email})`;
                        userSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                    showAlert('Error loading users. Please try again.');
                });
        }

        function createGroup() {
            const form = document.getElementById('groupForm');
            const formData = new FormData(form);
            const groupData = {
                name: formData.get('name')
            };

            fetch('/api/groups', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(groupData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.json();
            })
            .then(() => {
                form.reset();
                loadGroups();
                showAlert('Group created successfully!', 'success');
            })
            .catch(error => {
                console.error('Error creating group:', error);
                showAlert('Error creating group: ' + error.message);
            });
        }

        function addMemberToGroup() {
            const form = document.getElementById('addMemberForm');
            const formData = new FormData(form);
            const groupId = formData.get('groupId');
            const userId = formData.get('userId');

            if (!groupId || !userId) {
                showAlert('Please select both a group and a user.');
                return;
            }

            fetch(`/api/groups/${groupId}/members?userId=${userId}`, {
                method: 'POST'
            })
            .then(response => {
                if (response.ok) {
                    form.reset();
                    showAlert('Member added successfully!', 'success');
                    // Refresh the members view if we're viewing this group
                    const currentViewGroup = document.getElementById('viewGroupId').value;
                    if (currentViewGroup === groupId) {
                        loadGroupMembers(groupId);
                    }
                } else {
                    return response.text().then(text => { throw new Error(text) });
                }
            })
            .catch(error => {
                console.error('Error adding member:', error);
                if (error.message.includes('already a member')) {
                    showAlert('This user is already a member of the selected group.');
                } else {
                    showAlert('Error adding member: ' + error.message);
                }
            });
        }

        function loadGroupMembers(groupId) {
            if (!groupId) {
                document.getElementById('membersTableBody').innerHTML = '';
                return;
            }

            fetch(`/api/groups/${groupId}/members`)
                .then(response => response.json())
                .then(members => {
                    const tbody = document.getElementById('membersTableBody');
                    tbody.innerHTML = '';
                    
                    if (members.length === 0) {
                        const row = document.createElement('tr');
                        row.innerHTML = `<td colspan="6" class="text-center">No members in this group yet.</td>`;
                        tbody.appendChild(row);
                        return;
                    }
                    
                    members.forEach(member => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${member.userId}</td>
                            <td>${member.name}</td>
                            <td>${member.email}</td>
                            <td>${member.contactNo || 'N/A'}</td>
                            <td>${member.joinDate ? new Date(member.joinDate).toLocaleDateString() : 'N/A'}</td>
                            <td>
                                <button class="btn btn-danger btn-sm" onclick="removeMemberFromGroup(${groupId}, ${member.userId})">Remove</button>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                })
                .catch(error => {
                    console.error('Error loading group members:', error);
                    showAlert('Error loading group members. Please try again.');
                });
        }

        function removeMemberFromGroup(groupId, userId) {
            if (confirm('Are you sure you want to remove this member from the group?')) {
                fetch(`/api/groups/${groupId}/members?userId=${userId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        showAlert('Member removed successfully!', 'success');
                        loadGroupMembers(groupId); // Refresh the members list
                    } else {
                        return response.text().then(text => { throw new Error(text) });
                    }
                })
                .catch(error => {
                    console.error('Error removing member:', error);
                    showAlert('Error removing member: ' + error.message);
                });
            }
        }

        function deleteGroup(groupId) {
            if (confirm('Are you sure you want to delete this group? This will also delete all expenses associated with this group.')) {
                fetch(`/api/groups/${groupId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        loadGroups();
                        showAlert('Group deleted successfully!', 'success');
                    // Clear members table if we were viewing this group
                        document.getElementById('viewGroupId').value = '';
                        document.getElementById('membersTableBody').innerHTML = '';
                    } else {
                        throw new Error('Failed to delete group');
                    }
                })
                .catch(error => {
                    console.error('Error deleting group:', error);
                    showAlert('Error deleting group. Please try again.');
                });
            }
        }
    </script>
</body>
</html>

--- File: src/main/resources/templates/register.html ---

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up - ExpenseSplit</title>
    <link rel="stylesheet" th:href="@{/css/styles.css}">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="professional-auth-body">
    <div class="professional-auth-container">
        <!-- Left Section - Branding -->
        <div class="auth-branding-section">
            <div class="branding-content">
                <div class="logo-large">
                    <i class="fas fa-money-bill-wave"></i>
                    <span>ExpenseSplit</span>
                </div>
                <h1 class="branding-title">Join Thousands<br>Managing Expenses</h1>
                <p class="branding-subtitle">Start splitting expenses with your groups today. No more awkward money conversations!</p>
                
                <!-- Feature List -->
                <div class="feature-list">
                    <div class="feature-item">
                        <i class="fas fa-users"></i>
                        <span>Create Groups</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-chart-pie"></i>
                        <span>Track Expenses</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-balance-scale"></i>
                        <span>Balance Settlements</span>
                    </div>
                </div>
                
                <!-- Existing User Section -->
                <!-- <div class="new-user-section">
                    <h3>Already have an account?</h3>
                    <p>Welcome back! Sign in to access your expenses and groups.</p>
                    <a th:href="@{/login}" class="professional-btn professional-btn-outline">
                        <i class="fas fa-sign-in-alt"></i>
                        Sign In Now
                    </a>
                </div> -->
            </div>
        </div>

        <!-- Right Section - Register Form -->
        <div class="auth-form-section">
            <div class="form-container">
                <div class="form-header">
                    <h2>Create Account</h2>
                    <p>Join us to start splitting expenses</p>
                </div>

                <!-- Alert Messages -->
                <div th:if="${error}" class="professional-alert professional-alert-error">
                    <i class="fas fa-exclamation-circle"></i>
                    <span th:text="${error}"></span>
                </div>

                <form th:action="@{/register}" method="post" th:object="${user}" class="professional-auth-form">
                    <div class="input-row">
                        <div class="input-group">
                            <label for="name" class="input-label">
                                <i class="fas fa-user"></i>
                                Full Name
                            </label>
                            <input type="text" id="name" th:field="*{name}" class="professional-input" placeholder="Enter your full name" required>
                        </div>
                    </div>

                    <div class="input-group">
                        <label for="email" class="input-label">
                            <i class="fas fa-envelope"></i>
                            Email Address
                        </label>
                        <input type="email" id="email" th:field="*{email}" class="professional-input" placeholder="Enter your email" required>
                    </div>

                    

                    <div class="input-row">
                        <div class="input-group">
                            <label for="password" class="input-label">
                                <i class="fas fa-lock"></i>
                                Password
                            </label>
                            <input type="password" id="password" th:field="*{password}" class="professional-input" placeholder="Create a password" required>
                            <div class="password-strength" id="passwordStrength"></div>
                        </div>
                        
                        <div class="input-group">
                            <label for="confirmPassword" class="input-label">
                                <i class="fas fa-lock"></i>
                                Confirm Password
                            </label>
                            <input type="password" id="confirmPassword" class="professional-input" placeholder="Confirm your password" required>
                            <div class="password-feedback" id="passwordFeedback"></div>
                        </div>
                    </div>

                    <div class="form-options">
                        <label class="checkbox-container">
                            <input type="checkbox" id="terms" required>
                            <span class="checkmark"></span>
                            I agree to the <a href="#" class="link">Terms of Service</a> and <a href="#" class="link">Privacy Policy</a>
                        </label>
                    </div>

                    <button type="submit" class="professional-btn professional-btn-primary" id="submitBtn">
                        <span class="btn-content">
                            <i class="fas fa-user-plus"></i>
                            Create Account
                        </span>
                    </button>
                </form>

                <div class="auth-footer">
                    <p>Already have an account? <a th:href="@{/login}" class="auth-link">Sign In</a></p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Password confirmation validation
        document.getElementById('confirmPassword').addEventListener('input', function() {
            const password = document.getElementById('password');
            const confirmPassword = this;
            const feedback = document.getElementById('passwordFeedback');
            
            // Remove previous classes
            confirmPassword.classList.remove('password-match', 'password-mismatch');
            
            if (confirmPassword.value === '') {
                feedback.textContent = '';
                return;
            }
            
            if (password.value !== confirmPassword.value) {
                confirmPassword.classList.add('password-mismatch');
                feedback.textContent = 'Passwords do not match';
                feedback.className = 'password-feedback mismatch';
            } else {
                confirmPassword.classList.add('password-match');
                feedback.textContent = 'Passwords match!';
                feedback.className = 'password-feedback match';
            }
        });

        // Also validate on password field input
        document.getElementById('password').addEventListener('input', function() {
            const confirmPassword = document.getElementById('confirmPassword');
            const feedback = document.getElementById('passwordFeedback');
            
            if (confirmPassword.value) {
                // Remove previous classes
                confirmPassword.classList.remove('password-match', 'password-mismatch');
                
                if (this.value !== confirmPassword.value) {
                    confirmPassword.classList.add('password-mismatch');
                    feedback.textContent = 'Passwords do not match';
                    feedback.className = 'password-feedback mismatch';
                } else {
                    confirmPassword.classList.add('password-match');
                    feedback.textContent = 'Passwords match!';
                    feedback.className = 'password-feedback match';
                }
            }
            
            // Check password strength
            checkPasswordStrength(this.value);
        });

        // Password strength checker
        function checkPasswordStrength(password) {
            const strengthBar = document.getElementById('passwordStrength');
            let strength = 0;
            let feedback = '';
            
            if (password.length === 0) {
                strengthBar.textContent = '';
                strengthBar.className = 'password-strength';
                return;
            }
            
            // Length check
            if (password.length >= 8) strength++;
            
            // Lowercase check
            if (/[a-z]/.test(password)) strength++;
            
            // Uppercase check
            if (/[A-Z]/.test(password)) strength++;
            
            // Number check
            if (/[0-9]/.test(password)) strength++;
            
            // Special character check
            if (/[^A-Za-z0-9]/.test(password)) strength++;
            
            switch(strength) {
                case 0:
                case 1:
                    feedback = 'Very Weak';
                    strengthBar.className = 'password-strength very-weak';
                    break;
                case 2:
                    feedback = 'Weak';
                    strengthBar.className = 'password-strength weak';
                    break;
                case 3:
                    feedback = 'Medium';
                    strengthBar.className = 'password-strength medium';
                    break;
                case 4:
                    feedback = 'Strong';
                    strengthBar.className = 'password-strength strong';
                    break;
                case 5:
                    feedback = 'Very Strong';
                    strengthBar.className = 'password-strength very-strong';
                    break;
            }
            
            strengthBar.textContent = feedback;
        }

        // Form submission handler
        document.querySelector('.professional-auth-form').addEventListener('submit', function(e) {
            const password = document.getElementById('password');
            const confirmPassword = document.getElementById('confirmPassword');
            const terms = document.getElementById('terms');
            const submitBtn = document.getElementById('submitBtn');
            const btnContent = submitBtn.querySelector('.btn-content');
            
            // Validate passwords match
            if (password.value !== confirmPassword.value) {
                e.preventDefault();
                alert('Passwords do not match! Please make sure both passwords are the same.');
                confirmPassword.focus();
                return;
            }
            
            // Validate terms accepted
            if (!terms.checked) {
                e.preventDefault();
                alert('Please accept the Terms of Service and Privacy Policy to continue.');
                terms.focus();
                return;
            }
            
            // Validate password strength
            if (password.value.length < 6) {
                e.preventDefault();
                alert('Password must be at least 6 characters long.');
                password.focus();
                return;
            }
            
            // Show loading state
            btnContent.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating Account...';
            submitBtn.disabled = true;
            
            // Re-enable after 5 seconds in case of error
            setTimeout(() => {
                btnContent.innerHTML = '<i class="fas fa-user-plus"></i> Create Account';
                submitBtn.disabled = false;
            }, 5000);
        });

        // Add focus effects to inputs
        document.querySelectorAll('.professional-input').forEach(input => {
            input.addEventListener('focus', function() {
                this.parentElement.classList.add('focused');
            });
            
            input.addEventListener('blur', function() {
                if (!this.value) {
                    this.parentElement.classList.remove('focused');
                }
            });
        });

        // Real-time terms validation
        document.getElementById('terms').addEventListener('change', function() {
            const submitBtn = document.getElementById('submitBtn');
            if (this.checked) {
                submitBtn.classList.remove('btn-disabled');
            } else {
                submitBtn.classList.add('btn-disabled');
            }
        });

        // Initialize terms validation
        document.getElementById('terms').dispatchEvent(new Event('change'));
    </script>
</body>
</html>

--- File: src/main/resources/templates/login.html ---

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign In - ExpenseSplit</title>
    <link rel="stylesheet" th:href="@{/css/styles.css}">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="professional-auth-body">
    <div class="professional-auth-container">
        <!-- Left Section - Branding -->
        <div class="auth-branding-section">
            <div class="branding-content">
                <div class="logo-large">
                    <i class="fas fa-money-bill-wave"></i>
                    <span>ExpenseSplit</span>
                </div>
                <h1 class="branding-title">Split Expenses<br>Smartly</h1>
                <p class="branding-subtitle">Manage group expenses, track balances, and settle up effortlessly with your friends, family, or roommates.</p>
                <div class="feature-list">
                    <div class="feature-item">
                        <i class="fas fa-users"></i>
                        <span>Create Groups</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-chart-pie"></i>
                        <span>Track Expenses</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-balance-scale"></i>
                        <span>Balance Settlements</span>
                    </div>
                </div>
                
                <!-- New User Section -->
                <!-- <div class="new-user-section">
                    <h3>New to ExpenseSplit?</h3>
                    <p>Join thousands of users managing their expenses efficiently</p>
                    <a th:href="@{/register}" class="professional-btn professional-btn-outline">
                        <i class="fas fa-user-plus"></i>
                        Create New Account
                    </a>
                </div> -->
            </div>
        </div>

        <!-- Right Section - Login Form -->
        <div class="auth-form-section">
            <div class="form-container">
                <div class="form-header">
                    <h2>Welcome Back</h2>
                    <p>Sign in to your account to continue</p>
                </div>

                <!-- Alert Messages -->
                <div th:if="${error}" class="professional-alert professional-alert-error">
                    <i class="fas fa-exclamation-circle"></i>
                    <span th:text="${error}"></span>
                </div>
                <div th:if="${message}" class="professional-alert professional-alert-success">
                    <i class="fas fa-check-circle"></i>
                    <span th:text="${message}"></span>
                </div>
                <div th:if="${success}" class="professional-alert professional-alert-success">
                    <i class="fas fa-check-circle"></i>
                    <span th:text="${success}"></span>
                </div>

                <form th:action="@{/login}" method="post" class="professional-auth-form">
                    <div class="input-group">
                        <label for="username" class="input-label">
                            <i class="fas fa-envelope"></i>
                            Email Address
                        </label>
                        <input type="email" id="username" name="username" class="professional-input" placeholder="Enter your email" required>
                    </div>

                    <div class="input-group">
                        <label for="password" class="input-label">
                            <i class="fas fa-lock"></i>
                            Password
                        </label>
                        <input type="password" id="password" name="password" class="professional-input" placeholder="Enter your password" required>
                    </div>

                    <div class="form-options">
                        <label class="checkbox-container">
                            <input type="checkbox" id="rememberMe">
                            <span class="checkmark"></span>
                            Remember me
                        </label>
                        <a href="#" class="forgot-password">Forgot password?</a>
                    </div>

                    <button type="submit" class="professional-btn professional-btn-primary">
                        <span class="btn-content">
                            <i class="fas fa-sign-in-alt"></i>
                            Sign In
                        </span>
                    </button>
                </form>

                <div class="auth-footer">
                    <p>Don't have an account? <a th:href="@{/register}" class="auth-link">Sign Up</a></p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Add loading state to button
        document.querySelector('.professional-auth-form').addEventListener('submit', function(e) {
            const btn = this.querySelector('.professional-btn');
            const btnContent = btn.querySelector('.btn-content');
            
            btnContent.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Signing In...';
            btn.disabled = true;
            
            // Re-enable after 3 seconds in case of error
            setTimeout(() => {
                btnContent.innerHTML = '<i class="fas fa-sign-in-alt"></i> Sign In';
                btn.disabled = false;
            }, 3000);
        });

        // Add focus effects to inputs
        document.querySelectorAll('.professional-input').forEach(input => {
            input.addEventListener('focus', function() {
                this.parentElement.classList.add('focused');
            });
            
            input.addEventListener('blur', function() {
                if (!this.value) {
                    this.parentElement.classList.remove('focused');
                }
            });
        });
    </script>
</body>
</html>

--- File: src/main/resources/templates/balances.html ---

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Balances - Expense Split Tracker</title>
    <link rel="stylesheet" th:href="@{/css/styles.css}">
</head>
<body>
    <header class="header">
        <div class="container">
            <nav class="navbar">
                <div class="logo"> ExpenseSplit</div>
                <ul class="nav-links">
                    <li><a href="/">Dashboard</a></li>
                    <li><a href="/users">Users</a></li>
                    <li><a href="/groups">Groups</a></li>
                    <li><a href="/expenses">Expenses</a></li>
                    <li><a href="/balances" class="active">Balances</a></li>
                    <li>
                        <form th:action="@{/logout}" method="post" style="display: inline;">
                            <button type="submit" class="btn btn-outline btn-sm" style="color: var(--text-secondary); border: none; background: none;">
                                Logout
                            </button>
                        </form>
                    </li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
            <h1 class="section-title">Group Balances</h1>

            <!-- Alert Container -->
            <div id="alertContainer"></div>

            <!-- Group Selection -->
            <div class="card">
                <h2 class="card-title">Select Group</h2>
                <div class="form-group">
                    <label class="form-label" for="balanceGroupId">Group</label>
                    <select class="form-control" id="balanceGroupId" name="balanceGroupId">
                        <option value="">Select Group</option>
                    </select>
                </div>
            </div>

            <!-- Balances Display -->
            <div class="card">
                <h2 class="card-title">Balance Summary</h2>
                <div id="balancesContainer">
                    <p class="text-center">Please select a group to view balances.</p>
                </div>
            </div>

            <!-- Settlement Suggestions -->
            <div class="card" id="settlementSection" style="display: none;">
                <h2 class="card-title">Settlement Suggestions</h2>
                <div id="settlementContainer">
                    <!-- Settlement suggestions will be populated by JavaScript -->
                </div>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 ExpenseSplit Tracker. All rights reserved.</p>
        </div>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadGroupsForBalances();
            
            document.getElementById('balanceGroupId').addEventListener('change', function() {
                loadGroupBalances(this.value);
            });
        });

        function showAlert(message, type = 'error') {
            const alertContainer = document.getElementById('alertContainer');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            alertContainer.appendChild(alertDiv);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        function loadGroupsForBalances() {
            fetch('/api/groups')
                .then(response => response.json())
                .then(groups => {
                    const groupSelect = document.getElementById('balanceGroupId');
                    groupSelect.innerHTML = '<option value="">Select Group</option>';
                    
                    groups.forEach(group => {
                        const option = document.createElement('option');
                        option.value = group.groupId;
                        option.textContent = group.name;
                        groupSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading groups:', error);
                    showAlert('Error loading groups. Please try again.');
                });
        }

        function loadGroupBalances(groupId) {
            if (!groupId) {
                document.getElementById('balancesContainer').innerHTML = '<p class="text-center">Please select a group to view balances.</p>';
                document.getElementById('settlementSection').style.display = 'none';
                return;
            }

            fetch(`/api/balances/group/${groupId}`)
                .then(response => response.json())
                .then(balances => {
                    const container = document.getElementById('balancesContainer');
                    const settlementSection = document.getElementById('settlementSection');
                    
                    if (balances.length === 0) {
                        container.innerHTML = '<p class="text-center">No balances found for this group.</p>';
                        settlementSection.style.display = 'none';
                        return;
                    }
                    
                    let html = '<div class="row">';
                    let debtors = [];
                    let creditors = [];
                    
                    balances.forEach(balance => {
                        const balanceClass = balance.balance > 0 ? 'balance-positive' : 
                                           balance.balance < 0 ? 'balance-negative' : 'balance-zero';
                        
                        html += `
                            <div class="col-4">
                                <div class="balance-card ${balanceClass}">
                                    <h3>${balance.userName}</h3>
                                    <div class="balance-amount">₹${Math.abs(balance.balance).toFixed(2)}</div>
                                    <p>${balance.balance > 0 ? 'Should receive' : balance.balance < 0 ? 'Should pay' : 'Settled up'}</p>
                                </div>
                            </div>
                        `;

                        // Categorize for settlement suggestions
                        if (balance.balance > 0) {
                            creditors.push({ name: balance.userName, amount: balance.balance });
                        } else if (balance.balance < 0) {
                            debtors.push({ name: balance.userName, amount: Math.abs(balance.balance) });
                        }
                    });
                    
                    html += '</div>';
                    container.innerHTML = html;

                    // Generate settlement suggestions
                    generateSettlementSuggestions(debtors, creditors);
                    settlementSection.style.display = 'block';
                })
                .catch(error => {
                    console.error('Error loading balances:', error);
                    showAlert('Error loading balances. Please try again.');
                    document.getElementById('settlementSection').style.display = 'none';
                });
        }

        function generateSettlementSuggestions(debtors, creditors) {
            const container = document.getElementById('settlementContainer');
            
            if (debtors.length === 0 && creditors.length === 0) {
                container.innerHTML = '<p class="text-center">All balances are settled! 🎉</p>';
                return;
            }

            let html = '<div class="settlement-list">';
            let i = 0, j = 0;

            while (i < debtors.length && j < creditors.length) {
                const debtor = debtors[i];
                const creditor = creditors[j];
                const amount = Math.min(debtor.amount, creditor.amount);

                html += `
                    <div class="settlement-item">
                        <span class="debtor">${debtor.name}</span> 
                        <span class="action">should pay</span>
                        <span class="amount">₹${amount.toFixed(2)}</span>
                        <span class="action">to</span>
                        <span class="creditor">${creditor.name}</span>
                    </div>
                `;

                debtor.amount -= amount;
                creditor.amount -= amount;

                if (debtor.amount === 0) i++;
                if (creditor.amount === 0) j++;
            }

            html += '</div>';
            container.innerHTML = html;
        }
    </script>
</body>
</html>

--- File: src/main/resources/templates/users.html ---

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users - Expense Split Tracker</title>
    <link rel="stylesheet" th:href="@{/css/styles.css}">
</head>
<body>
    <header class="header">
        <div class="container">
            <nav class="navbar">
                <div class="logo"> ExpenseSplit</div>
                <ul class="nav-links">
                    <li><a href="/">Dashboard</a></li>
                    <li><a href="/users" class="active">Users</a></li>
                    <li><a href="/groups">Groups</a></li>
                    <li><a href="/expenses">Expenses</a></li>
                    <li><a href="/balances">Balances</a></li>
                    <li>
                        <form th:action="@{/logout}" method="post" style="display: inline;">
                            <button type="submit" class="btn btn-outline btn-sm" style="color: var(--text-secondary); border: none; background: none;">
                                Logout
                            </button>
                        </form>
                    </li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
            <h1 class="section-title">Manage Users</h1>

            <!-- Alert Container -->
            <div id="alertContainer"></div>

            <!-- Add User Form -->
            <div class="card">
                <h2 class="card-title">Add New User</h2>
                <form id="userForm">
                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label class="form-label" for="name">Full Name</label>
                                <input type="text" class="form-control" id="name" name="name" placeholder="Enter full name" required>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label class="form-label" for="email">Email</label>
                                <input type="email" class="form-control" id="email" name="email" placeholder="Enter email address" required>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="contactNo">Contact Number</label>
                        <input type="tel" class="form-control" id="contactNo" name="contactNo" placeholder="Enter contact number">
                    </div>
                    <button type="submit" class="btn btn-primary">Add User</button>
                </form>
            </div>

            <!-- Users List -->
            <div class="card">
                <h2 class="card-title">All Users</h2>
                <div class="table-container">
                    <table class="table" id="usersTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Contact</th>
                                <th>Join Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <!-- Users will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 ExpenseSplit Tracker. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Load users when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadUsers();
            
            // Handle form submission
            document.getElementById('userForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addUser();
            });
        });

        function showAlert(message, type = 'error') {
            const alertContainer = document.getElementById('alertContainer');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            alertContainer.appendChild(alertDiv);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        function loadUsers() {
            fetch('/api/users')
                .then(response => response.json())
                .then(users => {
                    const tbody = document.getElementById('usersTableBody');
                    tbody.innerHTML = '';
                    
                    if (users.length === 0) {
                        const row = document.createElement('tr');
                        row.innerHTML = `<td colspan="6" class="text-center">No users found. Add some users to get started.</td>`;
                        tbody.appendChild(row);
                        return;
                    }
                    
                    users.forEach(user => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${user.userId}</td>
                            <td>${user.name}</td>
                            <td>${user.email}</td>
                            <td>${user.contactNo || 'N/A'}</td>
                            <td>${new Date(user.joinDate).toLocaleDateString()}</td>
                            <td>
                                <button class="btn btn-danger btn-sm" onclick="deleteUser(${user.userId})">Delete</button>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                    showAlert('Error loading users. Please try again.');
                });
        }

        function addUser() {
            const form = document.getElementById('userForm');
            const formData = new FormData(form);
            const userData = {
                name: formData.get('name'),
                email: formData.get('email'),
                contactNo: formData.get('contactNo'),
                password: "default123" // Default password for new users
            };

            fetch('/api/users', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(userData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.json();
            })
            .then(() => {
                form.reset();
                loadUsers();
                showAlert('User added successfully!', 'success');
            })
            .catch(error => {
                console.error('Error adding user:', error);
                showAlert('Error adding user: ' + error.message);
            });
        }

        function deleteUser(userId) {
            if (confirm('Are you sure you want to delete this user? This will remove them from all groups and expenses.')) {
                fetch(`/api/users/${userId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        loadUsers();
                        showAlert('User deleted successfully!', 'success');
                    } else {
                        throw new Error('Failed to delete user');
                    }
                })
                .catch(error => {
                    console.error('Error deleting user:', error);
                    showAlert('Error deleting user. Please try again.');
                });
            }
        }
    </script>
</body>
</html>

--- File: src/main/java/com/example/expensesplit/ExpensesplitApplication.java ---

package com.example.expensesplit;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ExpensesplitApplication {
    public static void main(String[] args) {
        SpringApplication.run(ExpensesplitApplication.class, args);
    }
}



--- File: src/main/java/com/example/expensesplit/dto/ExpenseParticipantDTO.java ---

package com.example.expensesplit.dto;

public class ExpenseParticipantDTO {
    private Long userId;
    private Double shareAmount;

    // Getters and Setters
    public Long getUserId() { return userId; }
    public void setUserId(Long userId) { this.userId = userId; }
    
    public Double getShareAmount() { return shareAmount; }
    public void setShareAmount(Double shareAmount) { this.shareAmount = shareAmount; }
}

--- File: src/main/java/com/example/expensesplit/dto/BalanceDTO.java ---

package com.example.expensesplit.dto;

import java.math.BigDecimal;

public class BalanceDTO {
    private Long userId;
    private String userName;
    private BigDecimal balance;

    // Getters and Setters
    public Long getUserId() { return userId; }
    public void setUserId(Long userId) { this.userId = userId; }
    
    public String getUserName() { return userName; }
    public void setUserName(String userName) { this.userName = userName; }
    
    public BigDecimal getBalance() { return balance; }
    public void setBalance(BigDecimal balance) { this.balance = balance; }
}


--- File: src/main/java/com/example/expensesplit/dto/ExpenseDTO.java ---

package com.example.expensesplit.dto;

import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.List;

public class ExpenseDTO {
    private Long expenseId;
    
    @NotNull(message = "Group ID is required")
    private Long groupId;
    
    @NotNull(message = "Payer ID is required")
    private Long paidBy;
    
    @NotNull(message = "Amount is required")
    @DecimalMin(value = "0.01", message = "Amount must be greater than 0")
    private Double amount;
    
    @NotBlank(message = "Description is required")
    private String description;
    
    private LocalDateTime expenseDate;
    private List<ExpenseParticipantDTO> participants;

    // Getters and Setters
    public Long getExpenseId() { return expenseId; }
    public void setExpenseId(Long expenseId) { this.expenseId = expenseId; }
    
    public Long getGroupId() { return groupId; }
    public void setGroupId(Long groupId) { this.groupId = groupId; }
    
    public Long getPaidBy() { return paidBy; }
    public void setPaidBy(Long paidBy) { this.paidBy = paidBy; }
    
    public Double getAmount() { return amount; }
    public void setAmount(Double amount) { this.amount = amount; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public LocalDateTime getExpenseDate() { return expenseDate; }
    public void setExpenseDate(LocalDateTime expenseDate) { this.expenseDate = expenseDate; }
    
    public List<ExpenseParticipantDTO> getParticipants() { return participants; }
    public void setParticipants(List<ExpenseParticipantDTO> participants) { this.participants = participants; }
}

--- File: src/main/java/com/example/expensesplit/dto/GroupDTO.java ---

package com.example.expensesplit.dto;

import jakarta.validation.constraints.NotBlank;
import java.time.LocalDateTime;

public class GroupDTO {
    private Long groupId;
    
    @NotBlank(message = "Group name is required")
    private String name;
    
    private LocalDateTime createdAt;

    // Getters and Setters
    public Long getGroupId() { return groupId; }
    public void setGroupId(Long groupId) { this.groupId = groupId; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
}


--- File: src/main/java/com/example/expensesplit/dto/UserDTO.java ---

package com.example.expensesplit.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import java.time.LocalDateTime;

public class UserDTO {
    private Long userId;
    
    @NotBlank(message = "Name is required")
    private String name;
    
    @Email(message = "Invalid email format")
    @NotBlank(message = "Email is required")
    private String email;
    
    private String contactNo;
    
    @NotBlank(message = "Password is required")
    private String password;
    
    private LocalDateTime joinDate;

    // Getters and Setters
    public Long getUserId() { return userId; }
    public void setUserId(Long userId) { this.userId = userId; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getContactNo() { return contactNo; }
    public void setContactNo(String contactNo) { this.contactNo = contactNo; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
    public LocalDateTime getJoinDate() { return joinDate; }
    public void setJoinDate(LocalDateTime joinDate) { this.joinDate = joinDate; }
}

--- File: src/main/java/com/example/expensesplit/repository/ExpenseParticipantRepository.java ---

package com.example.expensesplit.repository;

import com.example.expensesplit.entity.ExpenseParticipant;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ExpenseParticipantRepository extends JpaRepository<ExpenseParticipant, Long> {
    List<ExpenseParticipant> findByExpenseExpenseId(Long expenseId);
    List<ExpenseParticipant> findByUserUserIdAndExpenseGroupGroupId(Long userId, Long groupId);
}


--- File: src/main/java/com/example/expensesplit/repository/ExpenseRepository.java ---

package com.example.expensesplit.repository;

import com.example.expensesplit.entity.Expense;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ExpenseRepository extends JpaRepository<Expense, Long> {
    List<Expense> findByGroupGroupId(Long groupId);
}


--- File: src/main/java/com/example/expensesplit/repository/GroupMemberRepository.java ---

package com.example.expensesplit.repository;

import com.example.expensesplit.entity.GroupMember;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface GroupMemberRepository extends JpaRepository<GroupMember, Long> {
    List<GroupMember> findByGroupGroupId(Long groupId);
    Optional<GroupMember> findByGroupGroupIdAndUserUserId(Long groupId, Long userId);
    boolean existsByGroupGroupIdAndUserUserId(Long groupId, Long userId);
    void deleteByGroupGroupIdAndUserUserId(Long groupId, Long userId);
}

--- File: src/main/java/com/example/expensesplit/repository/GroupRepository.java ---

package com.example.expensesplit.repository;

import com.example.expensesplit.entity.Group;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface GroupRepository extends JpaRepository<Group, Long> {
    // This method is automatically provided by JpaRepository
}

--- File: src/main/java/com/example/expensesplit/repository/UserRepository.java ---

package com.example.expensesplit.repository;

import com.example.expensesplit.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
    boolean existsByEmail(String email);
}

--- File: src/main/java/com/example/expensesplit/config/SecurityConfig.java ---

package com.example.expensesplit.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final CustomUserDetailsService userDetailsService;

    public SecurityConfig(CustomUserDetailsService userDetailsService) {
        this.userDetailsService = userDetailsService;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(authz -> authz
                // Public routes - no authentication required
                .requestMatchers("/login", "/register", "/css/**", "/js/**", "/webjars/**").permitAll()
                // All other routes including root require authentication
                .anyRequest().authenticated()
            )
            .formLogin(form -> form
                .loginPage("/login")
                .loginProcessingUrl("/login")
                .successHandler(authenticationSuccessHandler())
                .failureUrl("/login?error=true")
                .permitAll()
            )
            .logout(logout -> logout
                .logoutUrl("/logout")
                .logoutSuccessUrl("/login?logout=true")
                .invalidateHttpSession(true)
                .deleteCookies("JSESSIONID")
                .permitAll()
            )
            .exceptionHandling(exception -> exception
                .authenticationEntryPoint((request, response, authException) -> {
                    // Redirect to login page if accessing protected route without authentication
                    response.sendRedirect("/login");
                })
            )
            .userDetailsService(userDetailsService)
            .csrf(csrf -> csrf.disable()); // Temporarily disable CSRF for development

        return http.build();
    }

    @Bean
    public AuthenticationSuccessHandler authenticationSuccessHandler() {
        return (request, response, authentication) -> {
            response.sendRedirect("/dashboard");
        };
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }
}

--- File: src/main/java/com/example/expensesplit/config/CustomUserDetailsService.java ---

package com.example.expensesplit.config;

import com.example.expensesplit.entity.User;
import com.example.expensesplit.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String email) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));

        List<GrantedAuthority> authorities = Collections.singletonList(new SimpleGrantedAuthority("ROLE_USER"));

        return new org.springframework.security.core.userdetails.User(
                user.getEmail(),
                user.getPassword(),
                authorities
        );
    }
}

--- File: src/main/java/com/example/expensesplit/entity/Expense.java ---

package com.example.expensesplit.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "expenses")
public class Expense {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long expenseId;
    
    @ManyToOne
    @JoinColumn(name = "group_id", nullable = false)
    private Group group;
    
    @ManyToOne
    @JoinColumn(name = "paid_by", nullable = false)
    private User paidBy;
    
    @NotNull(message = "Amount is required")
    @DecimalMin(value = "0.01", message = "Amount must be greater than 0")
    @Column(nullable = false)
    private Double amount;
    
    @NotBlank(message = "Description is required")
    @Column(nullable = false, length = 200)
    private String description;
    
    @CreationTimestamp
    @Column(name = "expense_date")
    private LocalDateTime expenseDate;
    
    @OneToMany(mappedBy = "expense", cascade = CascadeType.ALL)
    private List<ExpenseParticipant> participants = new ArrayList<>();

    // Getters and Setters
    public Long getExpenseId() { return expenseId; }
    public void setExpenseId(Long expenseId) { this.expenseId = expenseId; }
    
    public Group getGroup() { return group; }
    public void setGroup(Group group) { this.group = group; }
    
    public User getPaidBy() { return paidBy; }
    public void setPaidBy(User paidBy) { this.paidBy = paidBy; }
    
    public Double getAmount() { return amount; }
    public void setAmount(Double amount) { this.amount = amount; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public LocalDateTime getExpenseDate() { return expenseDate; }
    public void setExpenseDate(LocalDateTime expenseDate) { this.expenseDate = expenseDate; }
    
    public List<ExpenseParticipant> getParticipants() { return participants; }
    public void setParticipants(List<ExpenseParticipant> participants) { this.participants = participants; }
}

--- File: src/main/java/com/example/expensesplit/entity/Group.java ---

package com.example.expensesplit.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "expense_groups")
public class Group {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long groupId;
    
    @Column(nullable = false)
    private String name;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt = LocalDateTime.now();
    
    @OneToMany(mappedBy = "group", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Expense> expenses = new ArrayList<>();
    
    @OneToMany(mappedBy = "group", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<GroupMember> members = new ArrayList<>();
    
    // Constructors
    public Group() {}
    
    public Group(String name) {
        this.name = name;
    }
    
    // Getters and Setters
    public Long getGroupId() { return groupId; }
    public void setGroupId(Long groupId) { this.groupId = groupId; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public List<Expense> getExpenses() { return expenses; }
    public void setExpenses(List<Expense> expenses) { this.expenses = expenses; }
    
    public List<GroupMember> getMembers() { return members; }
    public void setMembers(List<GroupMember> members) { this.members = members; }
}

--- File: src/main/java/com/example/expensesplit/entity/User.java ---

package com.example.expensesplit.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "users")
public class User {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;
    
    @Column(nullable = false)
    private String name;
    
    @Column(unique = true, nullable = false)
    private String email;
    
    @Column(nullable = false)
    private String password;
    
    private String contactNo;
    
    @Column(name = "join_date")
    private LocalDateTime joinDate = LocalDateTime.now();
    
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<GroupMember> groupMemberships = new ArrayList<>();
    
    @OneToMany(mappedBy = "paidBy", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Expense> expensesPaid = new ArrayList<>();
    
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<ExpenseParticipant> expenseParticipants = new ArrayList<>();

    // Constructors
    public User() {}
    
    public User(String name, String email, String password, String contactNo) {
        this.name = name;
        this.email = email;
        this.password = password;
        this.contactNo = contactNo;
    }
    
    // Getters and Setters
    public Long getUserId() { return userId; }
    public void setUserId(Long userId) { this.userId = userId; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
    public String getContactNo() { return contactNo; }
    public void setContactNo(String contactNo) { this.contactNo = contactNo; }
    
    public LocalDateTime getJoinDate() { return joinDate; }
    public void setJoinDate(LocalDateTime joinDate) { this.joinDate = joinDate; }
    
    public List<GroupMember> getGroupMemberships() { return groupMemberships; }
    public void setGroupMemberships(List<GroupMember> groupMemberships) { this.groupMemberships = groupMemberships; }
    
    public List<Expense> getExpensesPaid() { return expensesPaid; }
    public void setExpensesPaid(List<Expense> expensesPaid) { this.expensesPaid = expensesPaid; }
    
    public List<ExpenseParticipant> getExpenseParticipants() { return expenseParticipants; }
    public void setExpenseParticipants(List<ExpenseParticipant> expenseParticipants) { this.expenseParticipants = expenseParticipants; }
}

--- File: src/main/java/com/example/expensesplit/entity/GroupMember.java ---

package com.example.expensesplit.entity;

import jakarta.persistence.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@Entity
@Table(name = "group_members")
public class GroupMember {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long memberId;
    
    @ManyToOne
    @JoinColumn(name = "group_id", nullable = false)
    private Group group;
    
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    
    @CreationTimestamp
    @Column(name = "joined_at")
    private LocalDateTime joinedAt;

    // Getters and Setters
    public Long getMemberId() { return memberId; }
    public void setMemberId(Long memberId) { this.memberId = memberId; }
    
    public Group getGroup() { return group; }
    public void setGroup(Group group) { this.group = group; }
    
    public User getUser() { return user; }
    public void setUser(User user) { this.user = user; }
    
    public LocalDateTime getJoinedAt() { return joinedAt; }
    public void setJoinedAt(LocalDateTime joinedAt) { this.joinedAt = joinedAt; }
}


--- File: src/main/java/com/example/expensesplit/entity/ExpenseParticipant.java ---

package com.example.expensesplit.entity;

import jakarta.persistence.*;

@Entity
@Table(name = "expense_participants")
public class ExpenseParticipant {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long participantId;
    
    @ManyToOne
    @JoinColumn(name = "expense_id", nullable = false)
    private Expense expense;
    
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    
    @Column(nullable = false)
    private Double shareAmount;

    // Getters and Setters
    public Long getParticipantId() { return participantId; }
    public void setParticipantId(Long participantId) { this.participantId = participantId; }
    
    public Expense getExpense() { return expense; }
    public void setExpense(Expense expense) { this.expense = expense; }
    
    public User getUser() { return user; }
    public void setUser(User user) { this.user = user; }
    
    public Double getShareAmount() { return shareAmount; }
    public void setShareAmount(Double shareAmount) { this.shareAmount = shareAmount; }
}

--- File: src/main/java/com/example/expensesplit/controller/WebController.java ---

package com.example.expensesplit.controller;

import com.example.expensesplit.service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class WebController {
    
    @Autowired
    private UserService userService;
    
    @Autowired
    private GroupService groupService;
    
    @Autowired
    private ExpenseService expenseService;
    
    @GetMapping("/")
    public String home() {
        return "redirect:/dashboard";
    }
    
    @GetMapping("/dashboard")
    public String dashboard(Model model) {
        try {
            // Get user count
            int userCount = userService.getAllUsers().size();
            model.addAttribute("totalUsers", userCount);
            
            // Get group count
            int groupCount = groupService.getAllGroups().size();
            model.addAttribute("totalGroups", groupCount);
            
            // Calculate total expenses count
            long totalExpenses = 0;
            try {
                totalExpenses = expenseService.getAllExpenses().size();
            } catch (Exception e) {
                // If no expenses exist, set to 0
                totalExpenses = 0;
            }
            model.addAttribute("totalExpenses", totalExpenses);
            
        } catch (Exception e) {
            // If database is not ready, set defaults
            System.err.println("Error loading dashboard data: " + e.getMessage());
            model.addAttribute("totalUsers", 0);
            model.addAttribute("totalGroups", 0);
            model.addAttribute("totalExpenses", 0);
        }
        return "index";
    }
    
    @GetMapping("/users")
    public String users() {
        return "users";
    }
    
    @GetMapping("/groups")
    public String groups() {
        return "groups";
    }
    
    @GetMapping("/expenses")
    public String expenses() {
        return "expenses";
    }
    
    @GetMapping("/balances")
    public String balances() {
        return "balances";
    }
}

--- File: src/main/java/com/example/expensesplit/controller/ExpenseController.java ---

package com.example.expensesplit.controller;

import com.example.expensesplit.dto.ExpenseDTO;
import com.example.expensesplit.dto.ExpenseParticipantDTO;
import com.example.expensesplit.service.ExpenseService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/expenses")
public class ExpenseController {
    
    @Autowired
    private ExpenseService expenseService;
    
    @PostMapping
    public ResponseEntity<?> createExpense(@Valid @RequestBody ExpenseDTO expenseDTO) {
        try {
            ExpenseDTO createdExpense = expenseService.createExpense(expenseDTO);
            return ResponseEntity.ok(createdExpense);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("Internal server error: " + e.getMessage());
        }
    }
    
    @GetMapping
    public ResponseEntity<?> getAllExpenses() {
        try {
            List<ExpenseDTO> expenses = expenseService.getAllExpenses();
            return ResponseEntity.ok(expenses);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("Error loading expenses: " + e.getMessage());
        }
    }
    
    @GetMapping("/group/{id}")
    public ResponseEntity<?> getExpensesByGroup(@PathVariable("id") Long groupId) {
        try {
            List<ExpenseDTO> expenses = expenseService.getExpensesByGroup(groupId);
            return ResponseEntity.ok(expenses);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("Error loading group expenses: " + e.getMessage());
        }
    }
    
    @PostMapping("/{id}/participants")
    public ResponseEntity<?> addParticipantsToExpense(
            @PathVariable("id") Long expenseId,
            @RequestBody List<ExpenseParticipantDTO> participants) {
        try {
            expenseService.addParticipantsToExpense(expenseId, participants);
            return ResponseEntity.ok().build();
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("Error adding participants: " + e.getMessage());
        }
    }
    
    @GetMapping("/{id}/participants")
    public ResponseEntity<?> getExpenseParticipants(
            @PathVariable("id") Long expenseId) {
        try {
            List<ExpenseParticipantDTO> participants = expenseService.getExpenseParticipants(expenseId);
            return ResponseEntity.ok(participants);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("Error loading participants: " + e.getMessage());
        }
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteExpense(@PathVariable("id") Long expenseId) {
        try {
            expenseService.deleteExpense(expenseId);
            return ResponseEntity.ok().build();
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("Error deleting expense: " + e.getMessage());
        }
    }
}

--- File: src/main/java/com/example/expensesplit/controller/BalanceController.java ---

package com.example.expensesplit.controller;

import com.example.expensesplit.dto.BalanceDTO;
import com.example.expensesplit.service.BalanceService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/balances")
public class BalanceController {
    
    @Autowired
    private BalanceService balanceService;
    
    @GetMapping("/group/{id}")
    public ResponseEntity<List<BalanceDTO>> getGroupBalances(@PathVariable("id") Long groupId) {
        try {
            List<BalanceDTO> balances = balanceService.getGroupBalances(groupId);
            return ResponseEntity.ok(balances);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }
}

--- File: src/main/java/com/example/expensesplit/controller/AuthController.java ---

package com.example.expensesplit.controller;

import com.example.expensesplit.dto.UserDTO;
import com.example.expensesplit.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.validation.Valid;

@Controller
public class AuthController {
    
    @Autowired
    private UserService userService;
    
    @GetMapping("/login")
    public String loginPage(@RequestParam(value = "error", required = false) String error,
                           @RequestParam(value = "logout", required = false) String logout,
                           @RequestParam(value = "success", required = false) String success,
                           Model model) {
        if (error != null) {
            model.addAttribute("error", "Invalid email or password!");
        }
        if (logout != null) {
            model.addAttribute("message", "You have been logged out successfully.");
        }
        if (success != null) {
            model.addAttribute("success", "Registration successful! Please login.");
        }
        return "login";
    }
    
    @GetMapping("/register")
    public String registerPage(Model model) {
        model.addAttribute("user", new UserDTO());
        return "register";
    }
    
    @PostMapping("/register")
    public String registerUser(@Valid UserDTO userDTO, BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "register";
        }
        
        try {
            userService.createUser(userDTO);
            return "redirect:/login?success=true";
        } catch (Exception e) {
            model.addAttribute("error", e.getMessage());
            model.addAttribute("user", userDTO);
            return "register";
        }
    }
}

--- File: src/main/java/com/example/expensesplit/controller/GroupController.java ---

package com.example.expensesplit.controller;

import com.example.expensesplit.dto.GroupDTO;
import com.example.expensesplit.dto.UserDTO;
import com.example.expensesplit.service.GroupService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/groups")
public class GroupController {
    
    @Autowired
    private GroupService groupService;
    
    @PostMapping
    public ResponseEntity<GroupDTO> createGroup(@Valid @RequestBody GroupDTO groupDTO) {
        try {
            GroupDTO createdGroup = groupService.createGroup(groupDTO);
            return ResponseEntity.ok(createdGroup);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    @GetMapping
    public ResponseEntity<List<GroupDTO>> getAllGroups() {
        try {
            List<GroupDTO> groups = groupService.getAllGroups();
            return ResponseEntity.ok(groups);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<GroupDTO> getGroupById(@PathVariable("id") Long groupId) {
        try {
            GroupDTO group = groupService.getGroupById(groupId);
            return ResponseEntity.ok(group);
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    @PostMapping("/{id}/members")
    public ResponseEntity<Void> addMemberToGroup(
            @PathVariable("id") Long groupId,
            @RequestParam Long userId) {
        try {
            groupService.addMemberToGroup(groupId, userId);
            return ResponseEntity.ok().build();
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    @DeleteMapping("/{id}/members")
    public ResponseEntity<Void> removeMemberFromGroup(
            @PathVariable("id") Long groupId,
            @RequestParam Long userId) {
        try {
            groupService.removeMemberFromGroup(groupId, userId);
            return ResponseEntity.ok().build();
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    @GetMapping("/{id}/members")
    public ResponseEntity<List<UserDTO>> getGroupMembers(@PathVariable("id") Long groupId) {
        try {
            List<UserDTO> members = groupService.getGroupMembers(groupId);
            return ResponseEntity.ok(members);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteGroup(@PathVariable("id") Long groupId) {
        try {
            groupService.deleteGroup(groupId);
            return ResponseEntity.ok().build();
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }
}

--- File: src/main/java/com/example/expensesplit/controller/UserController.java ---

package com.example.expensesplit.controller;

import com.example.expensesplit.dto.UserDTO;
import com.example.expensesplit.service.UserService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserController {
    
    @Autowired
    private UserService userService;
    
    @PostMapping
    public ResponseEntity<UserDTO> createUser(@Valid @RequestBody UserDTO userDTO) {
        try {
            UserDTO createdUser = userService.createUser(userDTO);
            return ResponseEntity.ok(createdUser);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    @GetMapping
    public ResponseEntity<List<UserDTO>> getAllUsers() {
        try {
            List<UserDTO> users = userService.getAllUsers();
            return ResponseEntity.ok(users);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable("id") Long userId) {
        try {
            userService.deleteUser(userId);
            return ResponseEntity.ok().build();
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }
}

--- File: src/main/java/com/example/expensesplit/service/BalanceService.java ---

package com.example.expensesplit.service;

import com.example.expensesplit.dto.BalanceDTO;
import com.example.expensesplit.entity.Expense;
import com.example.expensesplit.entity.ExpenseParticipant;
import com.example.expensesplit.entity.GroupMember;
import com.example.expensesplit.entity.User;
import com.example.expensesplit.repository.ExpenseParticipantRepository;
import com.example.expensesplit.repository.ExpenseRepository;
import com.example.expensesplit.repository.GroupMemberRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class BalanceService {
    
    @Autowired
    private ExpenseParticipantRepository expenseParticipantRepository;
    
    @Autowired
    private ExpenseRepository expenseRepository;
    
    @Autowired
    private GroupMemberRepository groupMemberRepository;
    
    public List<BalanceDTO> getGroupBalances(Long groupId) {
        List<GroupMember> groupMembers = groupMemberRepository.findByGroupGroupId(groupId);
        Map<Long, User> userMap = new HashMap<>();
        Map<Long, BigDecimal> paidAmounts = new HashMap<>();
        Map<Long, BigDecimal> owedAmounts = new HashMap<>();
        
        // Initialize user map and amounts
        for (GroupMember member : groupMembers) {
            User user = member.getUser();
            userMap.put(user.getUserId(), user);
            paidAmounts.put(user.getUserId(), BigDecimal.ZERO);
            owedAmounts.put(user.getUserId(), BigDecimal.ZERO);
        }
        
        // Calculate paid amounts
        List<Expense> expenses = expenseRepository.findByGroupGroupId(groupId);
        for (Expense expense : expenses) {
            Long paidByUserId = expense.getPaidBy().getUserId();
            BigDecimal currentPaid = paidAmounts.getOrDefault(paidByUserId, BigDecimal.ZERO);
            paidAmounts.put(paidByUserId, currentPaid.add(BigDecimal.valueOf(expense.getAmount())));
        }
        
        // Calculate owed amounts
        for (Long userId : userMap.keySet()) {
            List<ExpenseParticipant> participants = expenseParticipantRepository.findByUserUserIdAndExpenseGroupGroupId(userId, groupId);
            BigDecimal totalOwed = participants.stream()
                    .map(participant -> BigDecimal.valueOf(participant.getShareAmount()))
                    .reduce(BigDecimal.ZERO, BigDecimal::add);
            owedAmounts.put(userId, totalOwed);
        }
        
        // Calculate balances
        List<BalanceDTO> balances = new ArrayList<>();
        for (Long userId : userMap.keySet()) {
            BigDecimal paid = paidAmounts.getOrDefault(userId, BigDecimal.ZERO);
            BigDecimal owed = owedAmounts.getOrDefault(userId, BigDecimal.ZERO);
            BigDecimal balance = paid.subtract(owed);
            
            BalanceDTO balanceDTO = new BalanceDTO();
            balanceDTO.setUserId(userId);
            balanceDTO.setUserName(userMap.get(userId).getName());
            balanceDTO.setBalance(balance);
            
            balances.add(balanceDTO);
        }
        
        return balances;
    }
}

--- File: src/main/java/com/example/expensesplit/service/UserService.java ---

package com.example.expensesplit.service;

import com.example.expensesplit.dto.UserDTO;
import com.example.expensesplit.entity.User;
import com.example.expensesplit.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class UserService {
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private PasswordEncoder passwordEncoder;
    
    public UserDTO createUser(UserDTO userDTO) {
        if (userRepository.existsByEmail(userDTO.getEmail())) {
            throw new RuntimeException("Email already exists");
        }
        
        User user = new User();
        user.setName(userDTO.getName());
        user.setEmail(userDTO.getEmail());
        user.setContactNo(userDTO.getContactNo());
        user.setPassword(passwordEncoder.encode(userDTO.getPassword()));
        user.setJoinDate(LocalDateTime.now());
        
        User savedUser = userRepository.save(user);
        return convertToDTO(savedUser);
    }
    
    public List<UserDTO> getAllUsers() {
        return userRepository.findAll().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }
    
    public User getUserByEmail(String email) {
        return userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));
    }
    
    public void deleteUser(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        userRepository.delete(user);
    }
    
    private UserDTO convertToDTO(User user) {
        UserDTO dto = new UserDTO();
        dto.setUserId(user.getUserId());
        dto.setName(user.getName());
        dto.setEmail(user.getEmail());
        dto.setContactNo(user.getContactNo());
        dto.setJoinDate(user.getJoinDate());
        // Don't include password in DTO
        return dto;
    }
}

--- File: src/main/java/com/example/expensesplit/service/ExpenseService.java ---

package com.example.expensesplit.service;

import com.example.expensesplit.dto.ExpenseDTO;
import com.example.expensesplit.dto.ExpenseParticipantDTO;
import com.example.expensesplit.entity.*;
import com.example.expensesplit.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class ExpenseService {
    
    @Autowired
    private ExpenseRepository expenseRepository;
    
    @Autowired
    private GroupRepository groupRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private GroupMemberRepository groupMemberRepository;
    
    @Autowired
    private ExpenseParticipantRepository expenseParticipantRepository;
    
    public List<ExpenseDTO> getAllExpenses() {
        try {
            return expenseRepository.findAll().stream()
                    .map(this::convertToDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new RuntimeException("Error loading expenses: " + e.getMessage(), e);
        }
    }
    
    @Transactional
    public ExpenseDTO createExpense(ExpenseDTO expenseDTO) {
        try {
            Group group = groupRepository.findById(expenseDTO.getGroupId())
                    .orElseThrow(() -> new RuntimeException("Group not found with id: " + expenseDTO.getGroupId()));
            
            User paidBy = userRepository.findById(expenseDTO.getPaidBy())
                    .orElseThrow(() -> new RuntimeException("User not found with id: " + expenseDTO.getPaidBy()));
            
            // Verify payer is a group member
            if (!groupMemberRepository.existsByGroupGroupIdAndUserUserId(expenseDTO.getGroupId(), expenseDTO.getPaidBy())) {
                throw new RuntimeException("Payer is not a member of this group");
            }
            
            Expense expense = new Expense();
            expense.setGroup(group);
            expense.setPaidBy(paidBy);
            expense.setAmount(expenseDTO.getAmount());
            expense.setDescription(expenseDTO.getDescription());
            
            Expense savedExpense = expenseRepository.save(expense);
            
            // Add participants if provided
            if (expenseDTO.getParticipants() != null && !expenseDTO.getParticipants().isEmpty()) {
                addParticipantsToExpense(savedExpense.getExpenseId(), expenseDTO.getParticipants());
            } else {
                // Default: split equally among all group members
                splitEqually(savedExpense);
            }
            
            return convertToDTO(expenseRepository.findById(savedExpense.getExpenseId())
                    .orElseThrow(() -> new RuntimeException("Failed to retrieve created expense")));
        } catch (Exception e) {
            throw new RuntimeException("Error creating expense: " + e.getMessage(), e);
        }
    }
    
    public List<ExpenseDTO> getExpensesByGroup(Long groupId) {
        try {
            if (!groupRepository.existsById(groupId)) {
                throw new RuntimeException("Group not found with id: " + groupId);
            }
            return expenseRepository.findByGroupGroupId(groupId).stream()
                    .map(this::convertToDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new RuntimeException("Error loading expenses for group: " + e.getMessage(), e);
        }
    }
    
    @Transactional
    public void addParticipantsToExpense(Long expenseId, List<ExpenseParticipantDTO> participantDTOs) {
        try {
            Expense expense = expenseRepository.findById(expenseId)
                    .orElseThrow(() -> new RuntimeException("Expense not found with id: " + expenseId));
            
            // Clear existing participants
            List<ExpenseParticipant> existingParticipants = expenseParticipantRepository.findByExpenseExpenseId(expenseId);
            expenseParticipantRepository.deleteAll(existingParticipants);
            
            Double totalShare = participantDTOs.stream()
                    .map(ExpenseParticipantDTO::getShareAmount)
                    .reduce(0.0, Double::sum);
            
            // Allow small rounding differences
            if (Math.abs(totalShare - expense.getAmount()) > 0.01) {
                throw new RuntimeException("Total share amount must equal expense amount. Expected: " + expense.getAmount() + ", Got: " + totalShare);
            }
            
            for (ExpenseParticipantDTO participantDTO : participantDTOs) {
                User user = userRepository.findById(participantDTO.getUserId())
                        .orElseThrow(() -> new RuntimeException("User not found with id: " + participantDTO.getUserId()));
                
                // Verify user is a group member
                if (!groupMemberRepository.existsByGroupGroupIdAndUserUserId(
                        expense.getGroup().getGroupId(), participantDTO.getUserId())) {
                    throw new RuntimeException("User is not a member of this group");
                }
                
                ExpenseParticipant participant = new ExpenseParticipant();
                participant.setExpense(expense);
                participant.setUser(user);
                participant.setShareAmount(participantDTO.getShareAmount());
                
                expenseParticipantRepository.save(participant);
            }
            
            // Refresh the expense
            expenseRepository.flush();
        } catch (Exception e) {
            throw new RuntimeException("Error adding participants: " + e.getMessage(), e);
        }
    }
    
    public List<ExpenseParticipantDTO> getExpenseParticipants(Long expenseId) {
        try {
            if (!expenseRepository.existsById(expenseId)) {
                throw new RuntimeException("Expense not found with id: " + expenseId);
            }
            List<ExpenseParticipant> participants = expenseParticipantRepository.findByExpenseExpenseId(expenseId);
            return participants.stream()
                    .map(this::convertParticipantToDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new RuntimeException("Error loading expense participants: " + e.getMessage(), e);
        }
    }
    
    @Transactional
    public void deleteExpense(Long expenseId) {
        try {
            Expense expense = expenseRepository.findById(expenseId)
                    .orElseThrow(() -> new RuntimeException("Expense not found with id: " + expenseId));
            
            // Delete participants first
            List<ExpenseParticipant> participants = expenseParticipantRepository.findByExpenseExpenseId(expenseId);
            expenseParticipantRepository.deleteAll(participants);
            
            // Then delete the expense
            expenseRepository.delete(expense);
        } catch (Exception e) {
            throw new RuntimeException("Error deleting expense: " + e.getMessage(), e);
        }
    }
    
    private void splitEqually(Expense expense) {
        try {
            List<GroupMember> groupMembers = groupMemberRepository.findByGroupGroupId(expense.getGroup().getGroupId());
            int memberCount = groupMembers.size();
            
            if (memberCount == 0) {
                throw new RuntimeException("No members in group");
            }
            
            Double shareAmount = expense.getAmount() / memberCount;
            shareAmount = Math.round(shareAmount * 100.0) / 100.0; // Round to 2 decimal places
            
            // Handle rounding differences by adjusting the last share
            Double totalDistributed = 0.0;
            
            for (int i = 0; i < groupMembers.size(); i++) {
                GroupMember member = groupMembers.get(i);
                Double currentShare = shareAmount;
                
                // Adjust last share to account for rounding
                if (i == groupMembers.size() - 1) {
                    currentShare = expense.getAmount() - totalDistributed;
                } else {
                    totalDistributed += currentShare;
                }
                
                ExpenseParticipant participant = new ExpenseParticipant();
                participant.setExpense(expense);
                participant.setUser(member.getUser());
                participant.setShareAmount(currentShare);
                
                expenseParticipantRepository.save(participant);
            }
        } catch (Exception e) {
            throw new RuntimeException("Error splitting expense equally: " + e.getMessage(), e);
        }
    }
    
    private ExpenseDTO convertToDTO(Expense expense) {
        try {
            ExpenseDTO dto = new ExpenseDTO();
            dto.setExpenseId(expense.getExpenseId());
            dto.setGroupId(expense.getGroup().getGroupId());
            dto.setPaidBy(expense.getPaidBy().getUserId());
            dto.setAmount(expense.getAmount());
            dto.setDescription(expense.getDescription());
            dto.setExpenseDate(expense.getExpenseDate());
            
            List<ExpenseParticipantDTO> participants = expense.getParticipants().stream()
                    .map(this::convertParticipantToDTO)
                    .collect(Collectors.toList());
            dto.setParticipants(participants);
            
            return dto;
        } catch (Exception e) {
            throw new RuntimeException("Error converting expense to DTO: " + e.getMessage(), e);
        }
    }
    
    private ExpenseParticipantDTO convertParticipantToDTO(ExpenseParticipant participant) {
        ExpenseParticipantDTO dto = new ExpenseParticipantDTO();
        dto.setUserId(participant.getUser().getUserId());
        dto.setShareAmount(participant.getShareAmount());
        return dto;
    }
}

--- File: src/main/java/com/example/expensesplit/service/GroupService.java ---

package com.example.expensesplit.service;

import com.example.expensesplit.dto.GroupDTO;
import com.example.expensesplit.dto.UserDTO;
import com.example.expensesplit.entity.Group;
import com.example.expensesplit.entity.GroupMember;
import com.example.expensesplit.entity.User;
import com.example.expensesplit.repository.GroupMemberRepository;
import com.example.expensesplit.repository.GroupRepository;
import com.example.expensesplit.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class GroupService {
    
    @Autowired
    private GroupRepository groupRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private GroupMemberRepository groupMemberRepository;
    
    public GroupDTO createGroup(GroupDTO groupDTO) {
        Group group = new Group();
        group.setName(groupDTO.getName());
        
        Group savedGroup = groupRepository.save(group);
        return convertToDTO(savedGroup);
    }
    
    public List<GroupDTO> getAllGroups() {
        return groupRepository.findAll().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }
    
    public GroupDTO getGroupById(Long groupId) {
        Group group = groupRepository.findById(groupId)
                .orElseThrow(() -> new RuntimeException("Group not found with id: " + groupId));
        return convertToDTO(group);
    }
    
    public void deleteGroup(Long groupId) {
        Group group = groupRepository.findById(groupId)
                .orElseThrow(() -> new RuntimeException("Group not found"));
        groupRepository.delete(group);
    }
    
    public void addMemberToGroup(Long groupId, Long userId) {
        Group group = groupRepository.findById(groupId)
                .orElseThrow(() -> new RuntimeException("Group not found"));
        
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        if (groupMemberRepository.existsByGroupGroupIdAndUserUserId(groupId, userId)) {
            throw new RuntimeException("User is already a member of this group");
        }
        
        GroupMember groupMember = new GroupMember();
        groupMember.setGroup(group);
        groupMember.setUser(user);
        
        groupMemberRepository.save(groupMember);
    }
    
    @Transactional
    public void removeMemberFromGroup(Long groupId, Long userId) {
        GroupMember groupMember = groupMemberRepository.findByGroupGroupIdAndUserUserId(groupId, userId)
                .orElseThrow(() -> new RuntimeException("User is not a member of this group"));
        
        // Check if user has any expenses in this group
        // You might want to handle this differently based on your business logic
        // For now, we'll just remove the member
        
        groupMemberRepository.delete(groupMember);
    }
    
    public List<UserDTO> getGroupMembers(Long groupId) {
        List<GroupMember> members = groupMemberRepository.findByGroupGroupId(groupId);
        return members.stream()
                .map(member -> {
                    UserDTO dto = new UserDTO();
                    dto.setUserId(member.getUser().getUserId());
                    dto.setName(member.getUser().getName());
                    dto.setEmail(member.getUser().getEmail());
                    dto.setContactNo(member.getUser().getContactNo());
                    dto.setJoinDate(member.getUser().getJoinDate());
                    return dto;
                })
                .collect(Collectors.toList());
    }
    
    private GroupDTO convertToDTO(Group group) {
        GroupDTO dto = new GroupDTO();
        dto.setGroupId(group.getGroupId());
        dto.setName(group.getName());
        dto.setCreatedAt(group.getCreatedAt());
        return dto;
    }
}

